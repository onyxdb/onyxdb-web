/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString,
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, RequiredError} from './base';

/**
 *
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    lastName?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof AccountDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface BadRequestResponse
 */
export interface BadRequestResponse {
    /**
     *
     * @type {string}
     * @memberof BadRequestResponse
     */
    message: string;
}

/**
 *
 * @export
 * @interface BusinessRoleDTO
 */
export interface BusinessRoleDTO {
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    parentId?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof BusinessRoleDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface DomainComponentDTO
 */
export interface DomainComponentDTO {
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface NotFoundResponse
 */
export interface NotFoundResponse {
    /**
     *
     * @type {string}
     * @memberof NotFoundResponse
     */
    message: string;
}

/**
 *
 * @export
 * @interface OrganizationUnitDTO
 */
export interface OrganizationUnitDTO {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    domainComponentId?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    parentId?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    ownerId?: string;
}

/**
 *
 * @export
 * @interface PermissionDTO
 */
export interface PermissionDTO {
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    actionType?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof PermissionDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    parentId?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    ownerId?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ProductDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface RoleDTO
 */
export interface RoleDTO {
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    roleType?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    shopName?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    productId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    updatedAt?: string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new account
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (
            accountDTO: AccountDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountDTO' is not null or undefined
            assertParamExists('createAccount', 'accountDTO', accountDTO);
            const localVarPath = `/api/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                accountDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteAccount', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountById', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an account by ID
         * @param {string} accountId
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (
            accountId: string,
            accountDTO: AccountDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccount', 'accountId', accountId);
            // verify required parameter 'accountDTO' is not null or undefined
            assertParamExists('updateAccount', 'accountDTO', accountDTO);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                accountDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new account
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(
            accountDTO: AccountDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(
                accountDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.createAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.deleteAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountById(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountById(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAccountById']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAccounts(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAccounts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAllAccounts']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update an account by ID
         * @param {string} accountId
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(
            accountId: string,
            accountDTO: AccountDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(
                accountId,
                accountDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.updateAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = AccountsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new account
         * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(
            requestParameters: AccountsApiCreateAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .createAccount(requestParameters.accountDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(
            requestParameters: AccountsApiDeleteAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteAccount(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an account by ID
         * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(
            requestParameters: AccountsApiGetAccountByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .getAccountById(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountDTO>> {
            return localVarFp.getAllAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an account by ID
         * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(
            requestParameters: AccountsApiUpdateAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .updateAccount(requestParameters.accountId, requestParameters.accountDTO, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateAccountRequest
 */
export interface AccountsApiCreateAccountRequest {
    /**
     *
     * @type {AccountDTO}
     * @memberof AccountsApiCreateAccount
     */
    readonly accountDTO: AccountDTO;
}

/**
 * Request parameters for deleteAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountRequest
 */
export interface AccountsApiDeleteAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiDeleteAccount
     */
    readonly accountId: string;
}

/**
 * Request parameters for getAccountById operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountByIdRequest
 */
export interface AccountsApiGetAccountByIdRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiGetAccountById
     */
    readonly accountId: string;
}

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export interface AccountsApiUpdateAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {AccountDTO}
     * @memberof AccountsApiUpdateAccount
     */
    readonly accountDTO: AccountDTO;
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     *
     * @summary Create a new account
     * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public createAccount(
        requestParameters: AccountsApiCreateAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .createAccount(requestParameters.accountDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete an account by ID
     * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteAccount(
        requestParameters: AccountsApiDeleteAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .deleteAccount(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get an account by ID
     * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountById(
        requestParameters: AccountsApiGetAccountByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .getAccountById(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAllAccounts(options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration)
            .getAllAccounts(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an account by ID
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccount(
        requestParameters: AccountsApiUpdateAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .updateAccount(requestParameters.accountId, requestParameters.accountDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * BusinessRolesApi - axios parameter creator
 * @export
 */
export const BusinessRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToBusinessRole: async (
            businessRoleId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('addRoleToBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addRoleToBusinessRole', 'roleId', roleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles/{roleId}`
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessRole: async (
            businessRoleDTO: BusinessRoleDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleDTO' is not null or undefined
            assertParamExists('createBusinessRole', 'businessRoleDTO', businessRoleDTO);
            const localVarPath = `/api/v1/business-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                businessRoleDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessRole: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('deleteBusinessRole', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all business roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinessRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/business-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleById: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getBusinessRoleById', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get business role roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByBusinessRoleId: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getRolesByBusinessRoleId', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromBusinessRole: async (
            businessRoleId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('removeRoleFromBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removeRoleFromBusinessRole', 'roleId', roleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles/{roleId}`
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {string} businessRoleId
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessRole: async (
            businessRoleId: string,
            businessRoleDTO: BusinessRoleDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('updateBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'businessRoleDTO' is not null or undefined
            assertParamExists('updateBusinessRole', 'businessRoleDTO', businessRoleDTO);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                businessRoleDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * BusinessRolesApi - functional programming interface
 * @export
 */
export const BusinessRolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessRolesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoleToBusinessRole(
            businessRoleId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToBusinessRole(
                businessRoleId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.addRoleToBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusinessRole(
            businessRoleDTO: BusinessRoleDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusinessRole(
                businessRoleDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.createBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessRole(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessRole(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.deleteBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all business roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBusinessRoles(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessRoleDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBusinessRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getAllBusinessRoles']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessRoleById(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessRoleById(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getBusinessRoleById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get business role roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolesByBusinessRoleId(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolesByBusinessRoleId(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getRolesByBusinessRoleId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromBusinessRole(
            businessRoleId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromBusinessRole(
                businessRoleId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.removeRoleFromBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {string} businessRoleId
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessRole(
            businessRoleId: string,
            businessRoleDTO: BusinessRoleDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessRole(
                businessRoleId,
                businessRoleDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.updateBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * BusinessRolesApi - factory interface
 * @export
 */
export const BusinessRolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = BusinessRolesApiFp(configuration);
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {BusinessRolesApiAddRoleToBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToBusinessRole(
            requestParameters: BusinessRolesApiAddRoleToBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addRoleToBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.roleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRolesApiCreateBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessRole(
            requestParameters: BusinessRolesApiCreateBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .createBusinessRole(requestParameters.businessRoleDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {BusinessRolesApiDeleteBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessRole(
            requestParameters: BusinessRolesApiDeleteBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteBusinessRole(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all business roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinessRoles(options?: RawAxiosRequestConfig): AxiosPromise<Array<BusinessRoleDTO>> {
            return localVarFp
                .getAllBusinessRoles(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {BusinessRolesApiGetBusinessRoleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleById(
            requestParameters: BusinessRolesApiGetBusinessRoleByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .getBusinessRoleById(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get business role roles
         * @param {BusinessRolesApiGetRolesByBusinessRoleIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByBusinessRoleId(
            requestParameters: BusinessRolesApiGetRolesByBusinessRoleIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<RoleDTO>> {
            return localVarFp
                .getRolesByBusinessRoleId(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {BusinessRolesApiRemoveRoleFromBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromBusinessRole(
            requestParameters: BusinessRolesApiRemoveRoleFromBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeRoleFromBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.roleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {BusinessRolesApiUpdateBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessRole(
            requestParameters: BusinessRolesApiUpdateBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .updateBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.businessRoleDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addRoleToBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiAddRoleToBusinessRoleRequest
 */
export interface BusinessRolesApiAddRoleToBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiAddRoleToBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiAddRoleToBusinessRole
     */
    readonly roleId: string;
}

/**
 * Request parameters for createBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiCreateBusinessRoleRequest
 */
export interface BusinessRolesApiCreateBusinessRoleRequest {
    /**
     *
     * @type {BusinessRoleDTO}
     * @memberof BusinessRolesApiCreateBusinessRole
     */
    readonly businessRoleDTO: BusinessRoleDTO;
}

/**
 * Request parameters for deleteBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiDeleteBusinessRoleRequest
 */
export interface BusinessRolesApiDeleteBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiDeleteBusinessRole
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getBusinessRoleById operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetBusinessRoleByIdRequest
 */
export interface BusinessRolesApiGetBusinessRoleByIdRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetBusinessRoleById
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getRolesByBusinessRoleId operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetRolesByBusinessRoleIdRequest
 */
export interface BusinessRolesApiGetRolesByBusinessRoleIdRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetRolesByBusinessRoleId
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for removeRoleFromBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiRemoveRoleFromBusinessRoleRequest
 */
export interface BusinessRolesApiRemoveRoleFromBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiRemoveRoleFromBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiRemoveRoleFromBusinessRole
     */
    readonly roleId: string;
}

/**
 * Request parameters for updateBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiUpdateBusinessRoleRequest
 */
export interface BusinessRolesApiUpdateBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiUpdateBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {BusinessRoleDTO}
     * @memberof BusinessRolesApiUpdateBusinessRole
     */
    readonly businessRoleDTO: BusinessRoleDTO;
}

/**
 * BusinessRolesApi - object-oriented interface
 * @export
 * @class BusinessRolesApi
 * @extends {BaseAPI}
 */
export class BusinessRolesApi extends BaseAPI {
    /**
     *
     * @summary Add role to the business role link
     * @param {BusinessRolesApiAddRoleToBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public addRoleToBusinessRole(
        requestParameters: BusinessRolesApiAddRoleToBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .addRoleToBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.roleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new business role
     * @param {BusinessRolesApiCreateBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public createBusinessRole(
        requestParameters: BusinessRolesApiCreateBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .createBusinessRole(requestParameters.businessRoleDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a business role by ID
     * @param {BusinessRolesApiDeleteBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public deleteBusinessRole(
        requestParameters: BusinessRolesApiDeleteBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .deleteBusinessRole(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all business roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getAllBusinessRoles(options?: RawAxiosRequestConfig) {
        return BusinessRolesApiFp(this.configuration)
            .getAllBusinessRoles(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a business role by ID
     * @param {BusinessRolesApiGetBusinessRoleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getBusinessRoleById(
        requestParameters: BusinessRolesApiGetBusinessRoleByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getBusinessRoleById(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get business role roles
     * @param {BusinessRolesApiGetRolesByBusinessRoleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getRolesByBusinessRoleId(
        requestParameters: BusinessRolesApiGetRolesByBusinessRoleIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getRolesByBusinessRoleId(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete role to the business role link
     * @param {BusinessRolesApiRemoveRoleFromBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public removeRoleFromBusinessRole(
        requestParameters: BusinessRolesApiRemoveRoleFromBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .removeRoleFromBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.roleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a business role by ID
     * @param {BusinessRolesApiUpdateBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public updateBusinessRole(
        requestParameters: BusinessRolesApiUpdateBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .updateBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.businessRoleDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * DomainComponentsApi - axios parameter creator
 * @export
 */
export const DomainComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainComponent: async (
            domainComponentDTO: DomainComponentDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentDTO' is not null or undefined
            assertParamExists('createDomainComponent', 'domainComponentDTO', domainComponentDTO);
            const localVarPath = `/api/v1/domain-components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                domainComponentDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainComponent: async (
            domainComponentId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentId' is not null or undefined
            assertParamExists('deleteDomainComponent', 'domainComponentId', domainComponentId);
            const localVarPath = `/api/v1/domain-components/{domainComponentId}`.replace(
                `{${'domainComponentId'}}`,
                encodeURIComponent(String(domainComponentId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainComponents: async (
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/domain-components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentById: async (
            domainComponentId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentId' is not null or undefined
            assertParamExists('getDomainComponentById', 'domainComponentId', domainComponentId);
            const localVarPath = `/api/v1/domain-components/{domainComponentId}`.replace(
                `{${'domainComponentId'}}`,
                encodeURIComponent(String(domainComponentId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Domain component organization units
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitsByDomainComponentId: async (
            domainComponentId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentId' is not null or undefined
            assertParamExists(
                'getOrganizationUnitsByDomainComponentId',
                'domainComponentId',
                domainComponentId,
            );
            const localVarPath = `/api/v1/domain-components/{domainComponentId}/org-units`.replace(
                `{${'domainComponentId'}}`,
                encodeURIComponent(String(domainComponentId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {string} domainComponentId
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainComponent: async (
            domainComponentId: string,
            domainComponentDTO: DomainComponentDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentId' is not null or undefined
            assertParamExists('updateDomainComponent', 'domainComponentId', domainComponentId);
            // verify required parameter 'domainComponentDTO' is not null or undefined
            assertParamExists('updateDomainComponent', 'domainComponentDTO', domainComponentDTO);
            const localVarPath = `/api/v1/domain-components/{domainComponentId}`.replace(
                `{${'domainComponentId'}}`,
                encodeURIComponent(String(domainComponentId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                domainComponentDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DomainComponentsApi - functional programming interface
 * @export
 */
export const DomainComponentsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainComponentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomainComponent(
            domainComponentDTO: DomainComponentDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomainComponent(
                domainComponentDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.createDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomainComponent(
            domainComponentId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomainComponent(
                domainComponentId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.deleteDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDomainComponents(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainComponentDTO>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getAllDomainComponents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.getAllDomainComponents']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainComponentById(
            domainComponentId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainComponentById(
                domainComponentId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.getDomainComponentById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Domain component organization units
         * @param {string} domainComponentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUnitsByDomainComponentId(
            domainComponentId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUnitDTO>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getOrganizationUnitsByDomainComponentId(
                    domainComponentId,
                    options,
                );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.getOrganizationUnitsByDomainComponentId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {string} domainComponentId
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDomainComponent(
            domainComponentId: string,
            domainComponentDTO: DomainComponentDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDomainComponent(
                domainComponentId,
                domainComponentDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.updateDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * DomainComponentsApi - factory interface
 * @export
 */
export const DomainComponentsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = DomainComponentsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentsApiCreateDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainComponent(
            requestParameters: DomainComponentsApiCreateDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .createDomainComponent(requestParameters.domainComponentDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {DomainComponentsApiDeleteDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainComponent(
            requestParameters: DomainComponentsApiDeleteDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteDomainComponent(requestParameters.domainComponentId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainComponents(
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<DomainComponentDTO>> {
            return localVarFp
                .getAllDomainComponents(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {DomainComponentsApiGetDomainComponentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentById(
            requestParameters: DomainComponentsApiGetDomainComponentByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .getDomainComponentById(requestParameters.domainComponentId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Domain component organization units
         * @param {DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitsByDomainComponentId(
            requestParameters: DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<OrganizationUnitDTO>> {
            return localVarFp
                .getOrganizationUnitsByDomainComponentId(
                    requestParameters.domainComponentId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {DomainComponentsApiUpdateDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainComponent(
            requestParameters: DomainComponentsApiUpdateDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .updateDomainComponent(
                    requestParameters.domainComponentId,
                    requestParameters.domainComponentDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiCreateDomainComponentRequest
 */
export interface DomainComponentsApiCreateDomainComponentRequest {
    /**
     *
     * @type {DomainComponentDTO}
     * @memberof DomainComponentsApiCreateDomainComponent
     */
    readonly domainComponentDTO: DomainComponentDTO;
}

/**
 * Request parameters for deleteDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiDeleteDomainComponentRequest
 */
export interface DomainComponentsApiDeleteDomainComponentRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiDeleteDomainComponent
     */
    readonly domainComponentId: string;
}

/**
 * Request parameters for getDomainComponentById operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiGetDomainComponentByIdRequest
 */
export interface DomainComponentsApiGetDomainComponentByIdRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiGetDomainComponentById
     */
    readonly domainComponentId: string;
}

/**
 * Request parameters for getOrganizationUnitsByDomainComponentId operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest
 */
export interface DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiGetOrganizationUnitsByDomainComponentId
     */
    readonly domainComponentId: string;
}

/**
 * Request parameters for updateDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiUpdateDomainComponentRequest
 */
export interface DomainComponentsApiUpdateDomainComponentRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiUpdateDomainComponent
     */
    readonly domainComponentId: string;

    /**
     *
     * @type {DomainComponentDTO}
     * @memberof DomainComponentsApiUpdateDomainComponent
     */
    readonly domainComponentDTO: DomainComponentDTO;
}

/**
 * DomainComponentsApi - object-oriented interface
 * @export
 * @class DomainComponentsApi
 * @extends {BaseAPI}
 */
export class DomainComponentsApi extends BaseAPI {
    /**
     *
     * @summary Create a new domain component
     * @param {DomainComponentsApiCreateDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public createDomainComponent(
        requestParameters: DomainComponentsApiCreateDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .createDomainComponent(requestParameters.domainComponentDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a domain component by ID
     * @param {DomainComponentsApiDeleteDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public deleteDomainComponent(
        requestParameters: DomainComponentsApiDeleteDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .deleteDomainComponent(requestParameters.domainComponentId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all domain components
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getAllDomainComponents(options?: RawAxiosRequestConfig) {
        return DomainComponentsApiFp(this.configuration)
            .getAllDomainComponents(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a domain component by ID
     * @param {DomainComponentsApiGetDomainComponentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getDomainComponentById(
        requestParameters: DomainComponentsApiGetDomainComponentByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .getDomainComponentById(requestParameters.domainComponentId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Domain component organization units
     * @param {DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getOrganizationUnitsByDomainComponentId(
        requestParameters: DomainComponentsApiGetOrganizationUnitsByDomainComponentIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .getOrganizationUnitsByDomainComponentId(requestParameters.domainComponentId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a domain component by ID
     * @param {DomainComponentsApiUpdateDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public updateDomainComponent(
        requestParameters: DomainComponentsApiUpdateDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .updateDomainComponent(
                requestParameters.domainComponentId,
                requestParameters.domainComponentDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * OrganizationUnitsApi - axios parameter creator
 * @export
 */
export const OrganizationUnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {string} organizationUnitId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToOrganizationUnit: async (
            organizationUnitId: string,
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists(
                'addAccountToOrganizationUnit',
                'organizationUnitId',
                organizationUnitId,
            );
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addAccountToOrganizationUnit', 'accountId', accountId);
            const localVarPath =
                `/api/v1/organization-units/{organizationUnitId}/accounts/{accountId}`
                    .replace(
                        `{${'organizationUnitId'}}`,
                        encodeURIComponent(String(organizationUnitId)),
                    )
                    .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit: async (
            organizationUnitDTO: OrganizationUnitDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitDTO' is not null or undefined
            assertParamExists('createOrganizationUnit', 'organizationUnitDTO', organizationUnitDTO);
            const localVarPath = `/api/v1/organization-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                organizationUnitDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit: async (
            organizationUnitId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists('deleteOrganizationUnit', 'organizationUnitId', organizationUnitId);
            const localVarPath = `/api/v1/organization-units/{organizationUnitId}`.replace(
                `{${'organizationUnitId'}}`,
                encodeURIComponent(String(organizationUnitId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByOrganizationUnitId: async (
            organizationUnitId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists(
                'getAccountsByOrganizationUnitId',
                'organizationUnitId',
                organizationUnitId,
            );
            const localVarPath = `/api/v1/organization-units/{organizationUnitId}/accounts`.replace(
                `{${'organizationUnitId'}}`,
                encodeURIComponent(String(organizationUnitId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all organization units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationUnits: async (
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organization-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitById: async (
            organizationUnitId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists('getOrganizationUnitById', 'organizationUnitId', organizationUnitId);
            const localVarPath = `/api/v1/organization-units/{organizationUnitId}`.replace(
                `{${'organizationUnitId'}}`,
                encodeURIComponent(String(organizationUnitId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {string} organizationUnitId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFromOrganizationUnit: async (
            organizationUnitId: string,
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists(
                'removeAccountFromOrganizationUnit',
                'organizationUnitId',
                organizationUnitId,
            );
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeAccountFromOrganizationUnit', 'accountId', accountId);
            const localVarPath =
                `/api/v1/organization-units/{organizationUnitId}/accounts/{accountId}`
                    .replace(
                        `{${'organizationUnitId'}}`,
                        encodeURIComponent(String(organizationUnitId)),
                    )
                    .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {string} organizationUnitId
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit: async (
            organizationUnitId: string,
            organizationUnitDTO: OrganizationUnitDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitId' is not null or undefined
            assertParamExists('updateOrganizationUnit', 'organizationUnitId', organizationUnitId);
            // verify required parameter 'organizationUnitDTO' is not null or undefined
            assertParamExists('updateOrganizationUnit', 'organizationUnitDTO', organizationUnitDTO);
            const localVarPath = `/api/v1/organization-units/{organizationUnitId}`.replace(
                `{${'organizationUnitId'}}`,
                encodeURIComponent(String(organizationUnitId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                organizationUnitDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationUnitsApi - functional programming interface
 * @export
 */
export const OrganizationUnitsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationUnitsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {string} organizationUnitId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountToOrganizationUnit(
            organizationUnitId: string,
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccountToOrganizationUnit(
                organizationUnitId,
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.addAccountToOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationUnit(
            organizationUnitDTO: OrganizationUnitDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationUnit(
                organizationUnitDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.createOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationUnit(
            organizationUnitId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationUnit(
                organizationUnitId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.deleteOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsByOrganizationUnitId(
            organizationUnitId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountDTO>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getAccountsByOrganizationUnitId(
                    organizationUnitId,
                    options,
                );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getAccountsByOrganizationUnitId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all organization units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrganizationUnits(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUnitDTO>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getAllOrganizationUnits(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getAllOrganizationUnits']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {string} organizationUnitId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUnitById(
            organizationUnitId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUnitById(
                organizationUnitId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getOrganizationUnitById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {string} organizationUnitId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAccountFromOrganizationUnit(
            organizationUnitId: string,
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.removeAccountFromOrganizationUnit(
                    organizationUnitId,
                    accountId,
                    options,
                );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.removeAccountFromOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {string} organizationUnitId
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationUnit(
            organizationUnitId: string,
            organizationUnitDTO: OrganizationUnitDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationUnit(
                organizationUnitId,
                organizationUnitDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.updateOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * OrganizationUnitsApi - factory interface
 * @export
 */
export const OrganizationUnitsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = OrganizationUnitsApiFp(configuration);
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {OrganizationUnitsApiAddAccountToOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToOrganizationUnit(
            requestParameters: OrganizationUnitsApiAddAccountToOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addAccountToOrganizationUnit(
                    requestParameters.organizationUnitId,
                    requestParameters.accountId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitsApiCreateOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit(
            requestParameters: OrganizationUnitsApiCreateOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .createOrganizationUnit(requestParameters.organizationUnitDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {OrganizationUnitsApiDeleteOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit(
            requestParameters: OrganizationUnitsApiDeleteOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteOrganizationUnit(requestParameters.organizationUnitId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByOrganizationUnitId(
            requestParameters: OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<AccountDTO>> {
            return localVarFp
                .getAccountsByOrganizationUnitId(requestParameters.organizationUnitId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all organization units
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationUnits(
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<OrganizationUnitDTO>> {
            return localVarFp
                .getAllOrganizationUnits(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {OrganizationUnitsApiGetOrganizationUnitByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitById(
            requestParameters: OrganizationUnitsApiGetOrganizationUnitByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .getOrganizationUnitById(requestParameters.organizationUnitId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFromOrganizationUnit(
            requestParameters: OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeAccountFromOrganizationUnit(
                    requestParameters.organizationUnitId,
                    requestParameters.accountId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {OrganizationUnitsApiUpdateOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit(
            requestParameters: OrganizationUnitsApiUpdateOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .updateOrganizationUnit(
                    requestParameters.organizationUnitId,
                    requestParameters.organizationUnitDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAccountToOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiAddAccountToOrganizationUnitRequest
 */
export interface OrganizationUnitsApiAddAccountToOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiAddAccountToOrganizationUnit
     */
    readonly organizationUnitId: string;

    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiAddAccountToOrganizationUnit
     */
    readonly accountId: string;
}

/**
 * Request parameters for createOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiCreateOrganizationUnitRequest
 */
export interface OrganizationUnitsApiCreateOrganizationUnitRequest {
    /**
     *
     * @type {OrganizationUnitDTO}
     * @memberof OrganizationUnitsApiCreateOrganizationUnit
     */
    readonly organizationUnitDTO: OrganizationUnitDTO;
}

/**
 * Request parameters for deleteOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiDeleteOrganizationUnitRequest
 */
export interface OrganizationUnitsApiDeleteOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiDeleteOrganizationUnit
     */
    readonly organizationUnitId: string;
}

/**
 * Request parameters for getAccountsByOrganizationUnitId operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest
 */
export interface OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetAccountsByOrganizationUnitId
     */
    readonly organizationUnitId: string;
}

/**
 * Request parameters for getOrganizationUnitById operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetOrganizationUnitByIdRequest
 */
export interface OrganizationUnitsApiGetOrganizationUnitByIdRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetOrganizationUnitById
     */
    readonly organizationUnitId: string;
}

/**
 * Request parameters for removeAccountFromOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest
 */
export interface OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiRemoveAccountFromOrganizationUnit
     */
    readonly organizationUnitId: string;

    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiRemoveAccountFromOrganizationUnit
     */
    readonly accountId: string;
}

/**
 * Request parameters for updateOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiUpdateOrganizationUnitRequest
 */
export interface OrganizationUnitsApiUpdateOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiUpdateOrganizationUnit
     */
    readonly organizationUnitId: string;

    /**
     *
     * @type {OrganizationUnitDTO}
     * @memberof OrganizationUnitsApiUpdateOrganizationUnit
     */
    readonly organizationUnitDTO: OrganizationUnitDTO;
}

/**
 * OrganizationUnitsApi - object-oriented interface
 * @export
 * @class OrganizationUnitsApi
 * @extends {BaseAPI}
 */
export class OrganizationUnitsApi extends BaseAPI {
    /**
     *
     * @summary Add account to org. unit link
     * @param {OrganizationUnitsApiAddAccountToOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public addAccountToOrganizationUnit(
        requestParameters: OrganizationUnitsApiAddAccountToOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .addAccountToOrganizationUnit(
                requestParameters.organizationUnitId,
                requestParameters.accountId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new organization unit
     * @param {OrganizationUnitsApiCreateOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public createOrganizationUnit(
        requestParameters: OrganizationUnitsApiCreateOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .createOrganizationUnit(requestParameters.organizationUnitDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete an organization unit by ID
     * @param {OrganizationUnitsApiDeleteOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public deleteOrganizationUnit(
        requestParameters: OrganizationUnitsApiDeleteOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .deleteOrganizationUnit(requestParameters.organizationUnitId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all organization unit accounts
     * @param {OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getAccountsByOrganizationUnitId(
        requestParameters: OrganizationUnitsApiGetAccountsByOrganizationUnitIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getAccountsByOrganizationUnitId(requestParameters.organizationUnitId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all organization units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getAllOrganizationUnits(options?: RawAxiosRequestConfig) {
        return OrganizationUnitsApiFp(this.configuration)
            .getAllOrganizationUnits(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get an organization unit by ID
     * @param {OrganizationUnitsApiGetOrganizationUnitByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getOrganizationUnitById(
        requestParameters: OrganizationUnitsApiGetOrganizationUnitByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getOrganizationUnitById(requestParameters.organizationUnitId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete account to org. unit link
     * @param {OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public removeAccountFromOrganizationUnit(
        requestParameters: OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .removeAccountFromOrganizationUnit(
                requestParameters.organizationUnitId,
                requestParameters.accountId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an organization unit by ID
     * @param {OrganizationUnitsApiUpdateOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public updateOrganizationUnit(
        requestParameters: OrganizationUnitsApiUpdateOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .updateOrganizationUnit(
                requestParameters.organizationUnitId,
                requestParameters.organizationUnitDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new permission
         * @param {PermissionDTO} permissionDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission: async (
            permissionDTO: PermissionDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'permissionDTO' is not null or undefined
            assertParamExists('createPermission', 'permissionDTO', permissionDTO);
            const localVarPath = `/api/v1/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                permissionDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: async (
            permissionId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('deletePermission', 'permissionId', permissionId);
            const localVarPath = `/api/v1/permissions/{permissionId}`.replace(
                `{${'permissionId'}}`,
                encodeURIComponent(String(permissionId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionById: async (
            permissionId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermissionById', 'permissionId', permissionId);
            const localVarPath = `/api/v1/permissions/{permissionId}`.replace(
                `{${'permissionId'}}`,
                encodeURIComponent(String(permissionId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a permission by ID
         * @param {string} permissionId
         * @param {PermissionDTO} permissionDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermission: async (
            permissionId: string,
            permissionDTO: PermissionDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('updatePermission', 'permissionId', permissionId);
            // verify required parameter 'permissionDTO' is not null or undefined
            assertParamExists('updatePermission', 'permissionDTO', permissionDTO);
            const localVarPath = `/api/v1/permissions/{permissionId}`.replace(
                `{${'permissionId'}}`,
                encodeURIComponent(String(permissionId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                permissionDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new permission
         * @param {PermissionDTO} permissionDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermission(
            permissionDTO: PermissionDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPermission(
                permissionDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.createPermission']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermission(
            permissionId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePermission(
                permissionId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.deletePermission']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPermissions(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPermissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.getAllPermissions']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionById(
            permissionId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionById(
                permissionId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.getPermissionById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a permission by ID
         * @param {string} permissionId
         * @param {PermissionDTO} permissionDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePermission(
            permissionId: string,
            permissionDTO: PermissionDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePermission(
                permissionId,
                permissionDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.updatePermission']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = PermissionsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new permission
         * @param {PermissionsApiCreatePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission(
            requestParameters: PermissionsApiCreatePermissionRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PermissionDTO> {
            return localVarFp
                .createPermission(requestParameters.permissionDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a permission by ID
         * @param {PermissionsApiDeletePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission(
            requestParameters: PermissionsApiDeletePermissionRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deletePermission(requestParameters.permissionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionDTO>> {
            return localVarFp
                .getAllPermissions(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {PermissionsApiGetPermissionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionById(
            requestParameters: PermissionsApiGetPermissionByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PermissionDTO> {
            return localVarFp
                .getPermissionById(requestParameters.permissionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a permission by ID
         * @param {PermissionsApiUpdatePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermission(
            requestParameters: PermissionsApiUpdatePermissionRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PermissionDTO> {
            return localVarFp
                .updatePermission(
                    requestParameters.permissionId,
                    requestParameters.permissionDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPermission operation in PermissionsApi.
 * @export
 * @interface PermissionsApiCreatePermissionRequest
 */
export interface PermissionsApiCreatePermissionRequest {
    /**
     *
     * @type {PermissionDTO}
     * @memberof PermissionsApiCreatePermission
     */
    readonly permissionDTO: PermissionDTO;
}

/**
 * Request parameters for deletePermission operation in PermissionsApi.
 * @export
 * @interface PermissionsApiDeletePermissionRequest
 */
export interface PermissionsApiDeletePermissionRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiDeletePermission
     */
    readonly permissionId: string;
}

/**
 * Request parameters for getPermissionById operation in PermissionsApi.
 * @export
 * @interface PermissionsApiGetPermissionByIdRequest
 */
export interface PermissionsApiGetPermissionByIdRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiGetPermissionById
     */
    readonly permissionId: string;
}

/**
 * Request parameters for updatePermission operation in PermissionsApi.
 * @export
 * @interface PermissionsApiUpdatePermissionRequest
 */
export interface PermissionsApiUpdatePermissionRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiUpdatePermission
     */
    readonly permissionId: string;

    /**
     *
     * @type {PermissionDTO}
     * @memberof PermissionsApiUpdatePermission
     */
    readonly permissionDTO: PermissionDTO;
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     *
     * @summary Create a new permission
     * @param {PermissionsApiCreatePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public createPermission(
        requestParameters: PermissionsApiCreatePermissionRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .createPermission(requestParameters.permissionDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a permission by ID
     * @param {PermissionsApiDeletePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public deletePermission(
        requestParameters: PermissionsApiDeletePermissionRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .deletePermission(requestParameters.permissionId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public getAllPermissions(options?: RawAxiosRequestConfig) {
        return PermissionsApiFp(this.configuration)
            .getAllPermissions(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a permission by ID
     * @param {PermissionsApiGetPermissionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public getPermissionById(
        requestParameters: PermissionsApiGetPermissionByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .getPermissionById(requestParameters.permissionId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a permission by ID
     * @param {PermissionsApiUpdatePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public updatePermission(
        requestParameters: PermissionsApiUpdatePermissionRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .updatePermission(
                requestParameters.permissionId,
                requestParameters.permissionDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (
            productDTO: ProductDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('createProduct', 'productDTO', productDTO);
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                productDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (
            productId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (
            productId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductById', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a product by ID
         * @param {string} productId
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (
            productId: string,
            productDTO: ProductDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId);
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('updateProduct', 'productDTO', productDTO);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                productDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(
            productDTO: ProductDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(
                productDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.createProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(
            productId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(
                productId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.deleteProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getAllProducts']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(
            productId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(
                productId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getProductById']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a product by ID
         * @param {string} productId
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(
            productId: string,
            productDTO: ProductDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(
                productId,
                productDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.updateProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = ProductsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(
            requestParameters: ProductsApiCreateProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .createProduct(requestParameters.productDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(
            requestParameters: ProductsApiDeleteProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteProduct(requestParameters.productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductDTO>> {
            return localVarFp.getAllProducts(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a product by ID
         * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(
            requestParameters: ProductsApiGetProductByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .getProductById(requestParameters.productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a product by ID
         * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(
            requestParameters: ProductsApiUpdateProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .updateProduct(requestParameters.productId, requestParameters.productDTO, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateProductRequest
 */
export interface ProductsApiCreateProductRequest {
    /**
     *
     * @type {ProductDTO}
     * @memberof ProductsApiCreateProduct
     */
    readonly productDTO: ProductDTO;
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiDeleteProduct
     */
    readonly productId: string;
}

/**
 * Request parameters for getProductById operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductByIdRequest
 */
export interface ProductsApiGetProductByIdRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiGetProductById
     */
    readonly productId: string;
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiUpdateProduct
     */
    readonly productId: string;

    /**
     *
     * @type {ProductDTO}
     * @memberof ProductsApiUpdateProduct
     */
    readonly productDTO: ProductDTO;
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     *
     * @summary Create a new product
     * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public createProduct(
        requestParameters: ProductsApiCreateProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .createProduct(requestParameters.productDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a product by ID
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(
        requestParameters: ProductsApiDeleteProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .deleteProduct(requestParameters.productId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getAllProducts(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration)
            .getAllProducts(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a product by ID
     * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductById(
        requestParameters: ProductsApiGetProductByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .getProductById(requestParameters.productId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a product by ID
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(
        requestParameters: ProductsApiUpdateProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .updateProduct(requestParameters.productId, requestParameters.productDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * V1PingControllerApi - axios parameter creator
 * @export
 */
export const V1PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster: async (
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * V1PingControllerApi - functional programming interface
 * @export
 */
export const V1PingControllerApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = V1PingControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ClustersCreateCluster(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.v1ClustersCreateCluster(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1PingControllerApi.v1ClustersCreateCluster']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * V1PingControllerApi - factory interface
 * @export
 */
export const V1PingControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = V1PingControllerApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp
                .v1ClustersCreateCluster(options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1PingControllerApi - object-oriented interface
 * @export
 * @class V1PingControllerApi
 * @extends {BaseAPI}
 */
export class V1PingControllerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PingControllerApi
     */
    public v1ClustersCreateCluster(options?: RawAxiosRequestConfig) {
        return V1PingControllerApiFp(this.configuration)
            .v1ClustersCreateCluster(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
