/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString,
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, RequiredError} from './base';

/**
 *
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    lastName?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof AccountDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface BadRequestResponse
 */
export interface BadRequestResponse {
    /**
     *
     * @type {string}
     * @memberof BadRequestResponse
     */
    message: string;
}

/**
 *
 * @export
 * @interface BusinessRoleDTO
 */
export interface BusinessRoleDTO {
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    parentId?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof BusinessRoleDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof BusinessRoleDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface CheckPermission200Response
 */
export interface CheckPermission200Response {
    /**
     *
     * @type {boolean}
     * @memberof CheckPermission200Response
     */
    hasAccess?: boolean;
}

/**
 *
 * @export
 * @interface DomainComponentDTO
 */
export interface DomainComponentDTO {
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof DomainComponentDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface GetCurrentUser200Response
 */
export interface GetCurrentUser200Response {
    /**
     *
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    email?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof GetCurrentUser200Response
     */
    roles?: Array<string>;
}

/**
 *
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     *
     * @type {string}
     * @memberof Login200Response
     */
    accessToken?: string;
    /**
     *
     * @type {string}
     * @memberof Login200Response
     */
    refreshToken?: string;
}

/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}

/**
 *
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
    /**
     *
     * @type {string}
     * @memberof LogoutRequest
     */
    refreshToken?: string;
}

/**
 *
 * @export
 * @interface NotFoundResponse
 */
export interface NotFoundResponse {
    /**
     *
     * @type {string}
     * @memberof NotFoundResponse
     */
    message: string;
}

/**
 *
 * @export
 * @interface OrganizationUnitDTO
 */
export interface OrganizationUnitDTO {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    domainComponentId?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    parentId?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitDTO
     */
    ownerId?: string;
}

/**
 *
 * @export
 * @interface PaginatedAccountResponse
 */
export interface PaginatedAccountResponse {
    /**
     *
     * @type {number}
     * @memberof PaginatedAccountResponse
     */
    totalCount?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedAccountResponse
     */
    startPosition?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedAccountResponse
     */
    endPosition?: number;
    /**
     *
     * @type {Array<AccountDTO>}
     * @memberof PaginatedAccountResponse
     */
    data?: Array<AccountDTO>;
}

/**
 *
 * @export
 * @interface PaginatedBusinessRoleResponse
 */
export interface PaginatedBusinessRoleResponse {
    /**
     *
     * @type {number}
     * @memberof PaginatedBusinessRoleResponse
     */
    totalCount?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedBusinessRoleResponse
     */
    startPosition?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedBusinessRoleResponse
     */
    endPosition?: number;
    /**
     *
     * @type {Array<BusinessRoleDTO>}
     * @memberof PaginatedBusinessRoleResponse
     */
    data?: Array<BusinessRoleDTO>;
}

/**
 *
 * @export
 * @interface PaginatedOrganizationUnitResponse
 */
export interface PaginatedOrganizationUnitResponse {
    /**
     *
     * @type {number}
     * @memberof PaginatedOrganizationUnitResponse
     */
    totalCount?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedOrganizationUnitResponse
     */
    startPosition?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedOrganizationUnitResponse
     */
    endPosition?: number;
    /**
     *
     * @type {Array<OrganizationUnitDTO>}
     * @memberof PaginatedOrganizationUnitResponse
     */
    data?: Array<OrganizationUnitDTO>;
}

/**
 *
 * @export
 * @interface PaginatedRoleRequestResponse
 */
export interface PaginatedRoleRequestResponse {
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleRequestResponse
     */
    totalCount?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleRequestResponse
     */
    startPosition?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleRequestResponse
     */
    endPosition?: number;
    /**
     *
     * @type {Array<RoleRequestDTO>}
     * @memberof PaginatedRoleRequestResponse
     */
    data?: Array<RoleRequestDTO>;
}

/**
 *
 * @export
 * @interface PaginatedRoleResponse
 */
export interface PaginatedRoleResponse {
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleResponse
     */
    totalCount?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleResponse
     */
    startPosition?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoleResponse
     */
    endPosition?: number;
    /**
     *
     * @type {Array<RoleDTO>}
     * @memberof PaginatedRoleResponse
     */
    data?: Array<RoleDTO>;
}

/**
 *
 * @export
 * @interface PermissionDTO
 */
export interface PermissionDTO {
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    actionType?: string;
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    resourceType?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof PermissionDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof PermissionDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    parentId?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    ownerId?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ProductDTO
     */
    data?: {[key: string]: object};
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface ProductTreeDTO
 */
export interface ProductTreeDTO {
    /**
     *
     * @type {ProductDTO}
     * @memberof ProductTreeDTO
     */
    product?: ProductDTO;
    /**
     *
     * @type {Array<ProductTreeDTO>}
     * @memberof ProductTreeDTO
     */
    children?: Array<ProductTreeDTO>;
}

/**
 *
 * @export
 * @interface RefreshToken200Response
 */
export interface RefreshToken200Response {
    /**
     *
     * @type {string}
     * @memberof RefreshToken200Response
     */
    accessToken?: string;
}

/**
 *
 * @export
 * @interface RoleDTO
 */
export interface RoleDTO {
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    roleType?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    shopName?: string;
    /**
     *
     * @type {boolean}
     * @memberof RoleDTO
     */
    isShopHidden?: boolean;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    productId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    orgUnitId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    updatedAt?: string;
}

/**
 *
 * @export
 * @interface RoleRequestDTO
 */
export interface RoleRequestDTO {
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    roleId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    accountId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    ownerId?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    reason?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    status?: RoleRequestDTOStatusEnum;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRequestDTO
     */
    resolvedAt?: string;
}

export const RoleRequestDTOStatusEnum = {
    Waiting: 'WAITING',
    Approved: 'APPROVED',
    Declined: 'DECLINED',
} as const;

export type RoleRequestDTOStatusEnum =
    (typeof RoleRequestDTOStatusEnum)[keyof typeof RoleRequestDTOStatusEnum];

/**
 *
 * @export
 * @interface RoleWithPermissionsDTO
 */
export interface RoleWithPermissionsDTO {
    /**
     *
     * @type {RoleDTO}
     * @memberof RoleWithPermissionsDTO
     */
    role?: RoleDTO;
    /**
     *
     * @type {Array<PermissionDTO>}
     * @memberof RoleWithPermissionsDTO
     */
    permissions?: Array<PermissionDTO>;
}

/**
 *
 * @export
 * @interface UnauthorizedResponse
 */
export interface UnauthorizedResponse {
    /**
     *
     * @type {string}
     * @memberof UnauthorizedResponse
     */
    message: string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add business role to account link
         * @param {string} accountId
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBusinessRoleToAccount: async (
            accountId: string,
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addBusinessRoleToAccount', 'accountId', accountId);
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('addBusinessRoleToAccount', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/accounts/{accountId}/business-roles/{businessRoleId}`
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add role to account link
         * @param {string} accountId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToAccount: async (
            accountId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addRoleToAccount', 'accountId', accountId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addRoleToAccount', 'roleId', roleId);
            const localVarPath = `/api/v1/accounts/{accountId}/roles/{roleId}`
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new account
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (
            accountDTO: AccountDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountDTO' is not null or undefined
            assertParamExists('createAccount', 'accountDTO', accountDTO);
            const localVarPath = `/api/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                accountDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteAccount', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get account business roles
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBusinessRoles: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountBusinessRoles', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}/business-roles`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountById', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get account roles
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRoles: async (
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountRoles', 'accountId', accountId);
            const localVarPath = `/api/v1/accounts/{accountId}/roles`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all accounts
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts: async (
            search?: string,
            limit?: number,
            offset?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Business Role from Account
         * @param {string} accountId
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBusinessRoleFromAccount: async (
            accountId: string,
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeBusinessRoleFromAccount', 'accountId', accountId);
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('removeBusinessRoleFromAccount', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/accounts/{accountId}/business-roles/{businessRoleId}`
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove Role from Account
         * @param {string} accountId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromAccount: async (
            accountId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeRoleFromAccount', 'accountId', accountId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removeRoleFromAccount', 'roleId', roleId);
            const localVarPath = `/api/v1/accounts/{accountId}/roles/{roleId}`
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an account by ID
         * @param {string} accountId
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (
            accountId: string,
            accountDTO: AccountDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccount', 'accountId', accountId);
            // verify required parameter 'accountDTO' is not null or undefined
            assertParamExists('updateAccount', 'accountDTO', accountDTO);
            const localVarPath = `/api/v1/accounts/{accountId}`.replace(
                `{${'accountId'}}`,
                encodeURIComponent(String(accountId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                accountDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add business role to account link
         * @param {string} accountId
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBusinessRoleToAccount(
            accountId: string,
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBusinessRoleToAccount(
                accountId,
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.addBusinessRoleToAccount']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Add role to account link
         * @param {string} accountId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoleToAccount(
            accountId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToAccount(
                accountId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.addRoleToAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new account
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(
            accountDTO: AccountDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(
                accountDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.createAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.deleteAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get account business roles
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountBusinessRoles(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessRoleDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountBusinessRoles(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAccountBusinessRoles']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get an account by ID
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountById(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountById(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAccountById']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get account roles
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountRoles(
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountRoles(
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAccountRoles']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all accounts
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAccounts(
            search?: string,
            limit?: number,
            offset?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAccountResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAccounts(
                search,
                limit,
                offset,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.getAllAccounts']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove Business Role from Account
         * @param {string} accountId
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBusinessRoleFromAccount(
            accountId: string,
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBusinessRoleFromAccount(
                accountId,
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.removeBusinessRoleFromAccount']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Remove Role from Account
         * @param {string} accountId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromAccount(
            accountId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromAccount(
                accountId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.removeRoleFromAccount']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update an account by ID
         * @param {string} accountId
         * @param {AccountDTO} accountDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(
            accountId: string,
            accountDTO: AccountDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(
                accountId,
                accountDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AccountsApi.updateAccount']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = AccountsApiFp(configuration);
    return {
        /**
         *
         * @summary Add business role to account link
         * @param {AccountsApiAddBusinessRoleToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBusinessRoleToAccount(
            requestParameters: AccountsApiAddBusinessRoleToAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addBusinessRoleToAccount(
                    requestParameters.accountId,
                    requestParameters.businessRoleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Add role to account link
         * @param {AccountsApiAddRoleToAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToAccount(
            requestParameters: AccountsApiAddRoleToAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addRoleToAccount(requestParameters.accountId, requestParameters.roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new account
         * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(
            requestParameters: AccountsApiCreateAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .createAccount(requestParameters.accountDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an account by ID
         * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(
            requestParameters: AccountsApiDeleteAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteAccount(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account business roles
         * @param {AccountsApiGetAccountBusinessRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBusinessRoles(
            requestParameters: AccountsApiGetAccountBusinessRolesRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<BusinessRoleDTO>> {
            return localVarFp
                .getAccountBusinessRoles(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an account by ID
         * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(
            requestParameters: AccountsApiGetAccountByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .getAccountById(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account roles
         * @param {AccountsApiGetAccountRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRoles(
            requestParameters: AccountsApiGetAccountRolesRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<RoleDTO>> {
            return localVarFp
                .getAccountRoles(requestParameters.accountId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all accounts
         * @param {AccountsApiGetAllAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(
            requestParameters: AccountsApiGetAllAccountsRequest = {},
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PaginatedAccountResponse> {
            return localVarFp
                .getAllAccounts(
                    requestParameters.search,
                    requestParameters.limit,
                    requestParameters.offset,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove Business Role from Account
         * @param {AccountsApiRemoveBusinessRoleFromAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBusinessRoleFromAccount(
            requestParameters: AccountsApiRemoveBusinessRoleFromAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeBusinessRoleFromAccount(
                    requestParameters.accountId,
                    requestParameters.businessRoleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Remove Role from Account
         * @param {AccountsApiRemoveRoleFromAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromAccount(
            requestParameters: AccountsApiRemoveRoleFromAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeRoleFromAccount(
                    requestParameters.accountId,
                    requestParameters.roleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an account by ID
         * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(
            requestParameters: AccountsApiUpdateAccountRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<AccountDTO> {
            return localVarFp
                .updateAccount(requestParameters.accountId, requestParameters.accountDTO, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBusinessRoleToAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiAddBusinessRoleToAccountRequest
 */
export interface AccountsApiAddBusinessRoleToAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiAddBusinessRoleToAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {string}
     * @memberof AccountsApiAddBusinessRoleToAccount
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for addRoleToAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiAddRoleToAccountRequest
 */
export interface AccountsApiAddRoleToAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiAddRoleToAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {string}
     * @memberof AccountsApiAddRoleToAccount
     */
    readonly roleId: string;
}

/**
 * Request parameters for createAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateAccountRequest
 */
export interface AccountsApiCreateAccountRequest {
    /**
     *
     * @type {AccountDTO}
     * @memberof AccountsApiCreateAccount
     */
    readonly accountDTO: AccountDTO;
}

/**
 * Request parameters for deleteAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountRequest
 */
export interface AccountsApiDeleteAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiDeleteAccount
     */
    readonly accountId: string;
}

/**
 * Request parameters for getAccountBusinessRoles operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountBusinessRolesRequest
 */
export interface AccountsApiGetAccountBusinessRolesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiGetAccountBusinessRoles
     */
    readonly accountId: string;
}

/**
 * Request parameters for getAccountById operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountByIdRequest
 */
export interface AccountsApiGetAccountByIdRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiGetAccountById
     */
    readonly accountId: string;
}

/**
 * Request parameters for getAccountRoles operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRolesRequest
 */
export interface AccountsApiGetAccountRolesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiGetAccountRoles
     */
    readonly accountId: string;
}

/**
 * Request parameters for getAllAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAllAccountsRequest
 */
export interface AccountsApiGetAllAccountsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiGetAllAccounts
     */
    readonly search?: string;

    /**
     *
     * @type {number}
     * @memberof AccountsApiGetAllAccounts
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountsApiGetAllAccounts
     */
    readonly offset?: number;
}

/**
 * Request parameters for removeBusinessRoleFromAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiRemoveBusinessRoleFromAccountRequest
 */
export interface AccountsApiRemoveBusinessRoleFromAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiRemoveBusinessRoleFromAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {string}
     * @memberof AccountsApiRemoveBusinessRoleFromAccount
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for removeRoleFromAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiRemoveRoleFromAccountRequest
 */
export interface AccountsApiRemoveRoleFromAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiRemoveRoleFromAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {string}
     * @memberof AccountsApiRemoveRoleFromAccount
     */
    readonly roleId: string;
}

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export interface AccountsApiUpdateAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    readonly accountId: string;

    /**
     *
     * @type {AccountDTO}
     * @memberof AccountsApiUpdateAccount
     */
    readonly accountDTO: AccountDTO;
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     *
     * @summary Add business role to account link
     * @param {AccountsApiAddBusinessRoleToAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public addBusinessRoleToAccount(
        requestParameters: AccountsApiAddBusinessRoleToAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .addBusinessRoleToAccount(
                requestParameters.accountId,
                requestParameters.businessRoleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Add role to account link
     * @param {AccountsApiAddRoleToAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public addRoleToAccount(
        requestParameters: AccountsApiAddRoleToAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .addRoleToAccount(requestParameters.accountId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new account
     * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public createAccount(
        requestParameters: AccountsApiCreateAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .createAccount(requestParameters.accountDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete an account by ID
     * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteAccount(
        requestParameters: AccountsApiDeleteAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .deleteAccount(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get account business roles
     * @param {AccountsApiGetAccountBusinessRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountBusinessRoles(
        requestParameters: AccountsApiGetAccountBusinessRolesRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .getAccountBusinessRoles(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get an account by ID
     * @param {AccountsApiGetAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountById(
        requestParameters: AccountsApiGetAccountByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .getAccountById(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get account roles
     * @param {AccountsApiGetAccountRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccountRoles(
        requestParameters: AccountsApiGetAccountRolesRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .getAccountRoles(requestParameters.accountId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all accounts
     * @param {AccountsApiGetAllAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAllAccounts(
        requestParameters: AccountsApiGetAllAccountsRequest = {},
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .getAllAccounts(
                requestParameters.search,
                requestParameters.limit,
                requestParameters.offset,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Remove Business Role from Account
     * @param {AccountsApiRemoveBusinessRoleFromAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public removeBusinessRoleFromAccount(
        requestParameters: AccountsApiRemoveBusinessRoleFromAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .removeBusinessRoleFromAccount(
                requestParameters.accountId,
                requestParameters.businessRoleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Remove Role from Account
     * @param {AccountsApiRemoveRoleFromAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public removeRoleFromAccount(
        requestParameters: AccountsApiRemoveRoleFromAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .removeRoleFromAccount(requestParameters.accountId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an account by ID
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccount(
        requestParameters: AccountsApiUpdateAccountRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AccountsApiFp(this.configuration)
            .updateAccount(requestParameters.accountId, requestParameters.accountDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Получение информации о текущем пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Аутентификация пользователя
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (
            loginRequest: LoginRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest);
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                loginRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Выход пользователя из системы
         * @param {LogoutRequest} logoutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (
            logoutRequest: LogoutRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('logout', 'logoutRequest', logoutRequest);
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                logoutRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Обновление access токена
         * @param {LogoutRequest} logoutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (
            logoutRequest: LogoutRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('refreshToken', 'logoutRequest', logoutRequest);
            const localVarPath = `/api/v1/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                logoutRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Получение информации о текущем пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUser200Response>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AuthApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Аутентификация пользователя
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(
            loginRequest: LoginRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Выход пользователя из системы
         * @param {LogoutRequest} logoutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(
            logoutRequest: LogoutRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(
                logoutRequest,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AuthApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Обновление access токена
         * @param {LogoutRequest} logoutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(
            logoutRequest: LogoutRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshToken200Response>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(
                logoutRequest,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = AuthApiFp(configuration);
    return {
        /**
         *
         * @summary Получение информации о текущем пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<GetCurrentUser200Response> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Аутентификация пользователя
         * @param {AuthApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(
            requestParameters: AuthApiLoginRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Login200Response> {
            return localVarFp
                .login(requestParameters.loginRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Выход пользователя из системы
         * @param {AuthApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(
            requestParameters: AuthApiLogoutRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .logout(requestParameters.logoutRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Обновление access токена
         * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(
            requestParameters: AuthApiRefreshTokenRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RefreshToken200Response> {
            return localVarFp
                .refreshToken(requestParameters.logoutRequest, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginRequest}
     * @memberof AuthApiLogin
     */
    readonly loginRequest: LoginRequest;
}

/**
 * Request parameters for logout operation in AuthApi.
 * @export
 * @interface AuthApiLogoutRequest
 */
export interface AuthApiLogoutRequest {
    /**
     *
     * @type {LogoutRequest}
     * @memberof AuthApiLogout
     */
    readonly logoutRequest: LogoutRequest;
}

/**
 * Request parameters for refreshToken operation in AuthApi.
 * @export
 * @interface AuthApiRefreshTokenRequest
 */
export interface AuthApiRefreshTokenRequest {
    /**
     *
     * @type {LogoutRequest}
     * @memberof AuthApiRefreshToken
     */
    readonly logoutRequest: LogoutRequest;
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary Получение информации о текущем пользователе
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .getCurrentUser(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Аутентификация пользователя
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(requestParameters: AuthApiLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .login(requestParameters.loginRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Выход пользователя из системы
     * @param {AuthApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(requestParameters: AuthApiLogoutRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .logout(requestParameters.logoutRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Обновление access токена
     * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(
        requestParameters: AuthApiRefreshTokenRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return AuthApiFp(this.configuration)
            .refreshToken(requestParameters.logoutRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * BusinessRolesApi - axios parameter creator
 * @export
 */
export const BusinessRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToBusinessRole: async (
            businessRoleId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('addRoleToBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addRoleToBusinessRole', 'roleId', roleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles/{roleId}`
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessRole: async (
            businessRoleDTO: BusinessRoleDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleDTO' is not null or undefined
            assertParamExists('createBusinessRole', 'businessRoleDTO', businessRoleDTO);
            const localVarPath = `/api/v1/business-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                businessRoleDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessRole: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('deleteBusinessRole', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all business roles
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinessRoles: async (
            search?: string,
            limit?: number,
            offset?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/business-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleById: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getBusinessRoleById', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a business role children business roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleChildrenBRs: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getBusinessRoleChildrenBRs', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/children`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a business role parents business roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleParentsBRs: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getBusinessRoleParentsBRs', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/parents`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get business role roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByBusinessRoleId: async (
            businessRoleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('getRolesByBusinessRoleId', 'businessRoleId', businessRoleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromBusinessRole: async (
            businessRoleId: string,
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('removeRoleFromBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removeRoleFromBusinessRole', 'roleId', roleId);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}/roles/{roleId}`
                .replace(`{${'businessRoleId'}}`, encodeURIComponent(String(businessRoleId)))
                .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {string} businessRoleId
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessRole: async (
            businessRoleId: string,
            businessRoleDTO: BusinessRoleDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'businessRoleId' is not null or undefined
            assertParamExists('updateBusinessRole', 'businessRoleId', businessRoleId);
            // verify required parameter 'businessRoleDTO' is not null or undefined
            assertParamExists('updateBusinessRole', 'businessRoleDTO', businessRoleDTO);
            const localVarPath = `/api/v1/business-roles/{businessRoleId}`.replace(
                `{${'businessRoleId'}}`,
                encodeURIComponent(String(businessRoleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                businessRoleDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * BusinessRolesApi - functional programming interface
 * @export
 */
export const BusinessRolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessRolesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRoleToBusinessRole(
            businessRoleId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleToBusinessRole(
                businessRoleId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.addRoleToBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusinessRole(
            businessRoleDTO: BusinessRoleDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusinessRole(
                businessRoleDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.createBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessRole(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessRole(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.deleteBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all business roles
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBusinessRoles(
            search?: string,
            limit?: number,
            offset?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<PaginatedBusinessRoleResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBusinessRoles(
                search,
                limit,
                offset,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getAllBusinessRoles']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessRoleById(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessRoleById(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getBusinessRoleById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a business role children business roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessRoleChildrenBRs(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessRoleDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessRoleChildrenBRs(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getBusinessRoleChildrenBRs']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a business role parents business roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessRoleParentsBRs(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessRoleDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessRoleParentsBRs(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getBusinessRoleParentsBRs']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get business role roles
         * @param {string} businessRoleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolesByBusinessRoleId(
            businessRoleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolesByBusinessRoleId(
                businessRoleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.getRolesByBusinessRoleId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {string} businessRoleId
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromBusinessRole(
            businessRoleId: string,
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromBusinessRole(
                businessRoleId,
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.removeRoleFromBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {string} businessRoleId
         * @param {BusinessRoleDTO} businessRoleDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessRole(
            businessRoleId: string,
            businessRoleDTO: BusinessRoleDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessRole(
                businessRoleId,
                businessRoleDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['BusinessRolesApi.updateBusinessRole']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * BusinessRolesApi - factory interface
 * @export
 */
export const BusinessRolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = BusinessRolesApiFp(configuration);
    return {
        /**
         *
         * @summary Add role to the business role link
         * @param {BusinessRolesApiAddRoleToBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRoleToBusinessRole(
            requestParameters: BusinessRolesApiAddRoleToBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addRoleToBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.roleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new business role
         * @param {BusinessRolesApiCreateBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessRole(
            requestParameters: BusinessRolesApiCreateBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .createBusinessRole(requestParameters.businessRoleDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a business role by ID
         * @param {BusinessRolesApiDeleteBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessRole(
            requestParameters: BusinessRolesApiDeleteBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteBusinessRole(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all business roles
         * @param {BusinessRolesApiGetAllBusinessRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinessRoles(
            requestParameters: BusinessRolesApiGetAllBusinessRolesRequest = {},
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PaginatedBusinessRoleResponse> {
            return localVarFp
                .getAllBusinessRoles(
                    requestParameters.search,
                    requestParameters.limit,
                    requestParameters.offset,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a business role by ID
         * @param {BusinessRolesApiGetBusinessRoleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleById(
            requestParameters: BusinessRolesApiGetBusinessRoleByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .getBusinessRoleById(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a business role children business roles
         * @param {BusinessRolesApiGetBusinessRoleChildrenBRsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleChildrenBRs(
            requestParameters: BusinessRolesApiGetBusinessRoleChildrenBRsRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<BusinessRoleDTO>> {
            return localVarFp
                .getBusinessRoleChildrenBRs(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a business role parents business roles
         * @param {BusinessRolesApiGetBusinessRoleParentsBRsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRoleParentsBRs(
            requestParameters: BusinessRolesApiGetBusinessRoleParentsBRsRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<BusinessRoleDTO>> {
            return localVarFp
                .getBusinessRoleParentsBRs(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get business role roles
         * @param {BusinessRolesApiGetRolesByBusinessRoleIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByBusinessRoleId(
            requestParameters: BusinessRolesApiGetRolesByBusinessRoleIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<RoleDTO>> {
            return localVarFp
                .getRolesByBusinessRoleId(requestParameters.businessRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete role to the business role link
         * @param {BusinessRolesApiRemoveRoleFromBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromBusinessRole(
            requestParameters: BusinessRolesApiRemoveRoleFromBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeRoleFromBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.roleId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a business role by ID
         * @param {BusinessRolesApiUpdateBusinessRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessRole(
            requestParameters: BusinessRolesApiUpdateBusinessRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<BusinessRoleDTO> {
            return localVarFp
                .updateBusinessRole(
                    requestParameters.businessRoleId,
                    requestParameters.businessRoleDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addRoleToBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiAddRoleToBusinessRoleRequest
 */
export interface BusinessRolesApiAddRoleToBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiAddRoleToBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiAddRoleToBusinessRole
     */
    readonly roleId: string;
}

/**
 * Request parameters for createBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiCreateBusinessRoleRequest
 */
export interface BusinessRolesApiCreateBusinessRoleRequest {
    /**
     *
     * @type {BusinessRoleDTO}
     * @memberof BusinessRolesApiCreateBusinessRole
     */
    readonly businessRoleDTO: BusinessRoleDTO;
}

/**
 * Request parameters for deleteBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiDeleteBusinessRoleRequest
 */
export interface BusinessRolesApiDeleteBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiDeleteBusinessRole
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getAllBusinessRoles operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetAllBusinessRolesRequest
 */
export interface BusinessRolesApiGetAllBusinessRolesRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetAllBusinessRoles
     */
    readonly search?: string;

    /**
     *
     * @type {number}
     * @memberof BusinessRolesApiGetAllBusinessRoles
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof BusinessRolesApiGetAllBusinessRoles
     */
    readonly offset?: number;
}

/**
 * Request parameters for getBusinessRoleById operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetBusinessRoleByIdRequest
 */
export interface BusinessRolesApiGetBusinessRoleByIdRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetBusinessRoleById
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getBusinessRoleChildrenBRs operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetBusinessRoleChildrenBRsRequest
 */
export interface BusinessRolesApiGetBusinessRoleChildrenBRsRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetBusinessRoleChildrenBRs
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getBusinessRoleParentsBRs operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetBusinessRoleParentsBRsRequest
 */
export interface BusinessRolesApiGetBusinessRoleParentsBRsRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetBusinessRoleParentsBRs
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for getRolesByBusinessRoleId operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiGetRolesByBusinessRoleIdRequest
 */
export interface BusinessRolesApiGetRolesByBusinessRoleIdRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiGetRolesByBusinessRoleId
     */
    readonly businessRoleId: string;
}

/**
 * Request parameters for removeRoleFromBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiRemoveRoleFromBusinessRoleRequest
 */
export interface BusinessRolesApiRemoveRoleFromBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiRemoveRoleFromBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiRemoveRoleFromBusinessRole
     */
    readonly roleId: string;
}

/**
 * Request parameters for updateBusinessRole operation in BusinessRolesApi.
 * @export
 * @interface BusinessRolesApiUpdateBusinessRoleRequest
 */
export interface BusinessRolesApiUpdateBusinessRoleRequest {
    /**
     *
     * @type {string}
     * @memberof BusinessRolesApiUpdateBusinessRole
     */
    readonly businessRoleId: string;

    /**
     *
     * @type {BusinessRoleDTO}
     * @memberof BusinessRolesApiUpdateBusinessRole
     */
    readonly businessRoleDTO: BusinessRoleDTO;
}

/**
 * BusinessRolesApi - object-oriented interface
 * @export
 * @class BusinessRolesApi
 * @extends {BaseAPI}
 */
export class BusinessRolesApi extends BaseAPI {
    /**
     *
     * @summary Add role to the business role link
     * @param {BusinessRolesApiAddRoleToBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public addRoleToBusinessRole(
        requestParameters: BusinessRolesApiAddRoleToBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .addRoleToBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.roleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new business role
     * @param {BusinessRolesApiCreateBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public createBusinessRole(
        requestParameters: BusinessRolesApiCreateBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .createBusinessRole(requestParameters.businessRoleDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a business role by ID
     * @param {BusinessRolesApiDeleteBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public deleteBusinessRole(
        requestParameters: BusinessRolesApiDeleteBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .deleteBusinessRole(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all business roles
     * @param {BusinessRolesApiGetAllBusinessRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getAllBusinessRoles(
        requestParameters: BusinessRolesApiGetAllBusinessRolesRequest = {},
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getAllBusinessRoles(
                requestParameters.search,
                requestParameters.limit,
                requestParameters.offset,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a business role by ID
     * @param {BusinessRolesApiGetBusinessRoleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getBusinessRoleById(
        requestParameters: BusinessRolesApiGetBusinessRoleByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getBusinessRoleById(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a business role children business roles
     * @param {BusinessRolesApiGetBusinessRoleChildrenBRsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getBusinessRoleChildrenBRs(
        requestParameters: BusinessRolesApiGetBusinessRoleChildrenBRsRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getBusinessRoleChildrenBRs(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a business role parents business roles
     * @param {BusinessRolesApiGetBusinessRoleParentsBRsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getBusinessRoleParentsBRs(
        requestParameters: BusinessRolesApiGetBusinessRoleParentsBRsRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getBusinessRoleParentsBRs(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get business role roles
     * @param {BusinessRolesApiGetRolesByBusinessRoleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public getRolesByBusinessRoleId(
        requestParameters: BusinessRolesApiGetRolesByBusinessRoleIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .getRolesByBusinessRoleId(requestParameters.businessRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete role to the business role link
     * @param {BusinessRolesApiRemoveRoleFromBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public removeRoleFromBusinessRole(
        requestParameters: BusinessRolesApiRemoveRoleFromBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .removeRoleFromBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.roleId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a business role by ID
     * @param {BusinessRolesApiUpdateBusinessRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessRolesApi
     */
    public updateBusinessRole(
        requestParameters: BusinessRolesApiUpdateBusinessRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return BusinessRolesApiFp(this.configuration)
            .updateBusinessRole(
                requestParameters.businessRoleId,
                requestParameters.businessRoleDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * DomainComponentsApi - axios parameter creator
 * @export
 */
export const DomainComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainComponent: async (
            domainComponentDTO: DomainComponentDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'domainComponentDTO' is not null or undefined
            assertParamExists('createDomainComponent', 'domainComponentDTO', domainComponentDTO);
            const localVarPath = `/api/v1/domain-components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                domainComponentDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainComponent: async (
            dcId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dcId' is not null or undefined
            assertParamExists('deleteDomainComponent', 'dcId', dcId);
            const localVarPath = `/api/v1/domain-components/{dcId}`.replace(
                `{${'dcId'}}`,
                encodeURIComponent(String(dcId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainComponents: async (
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/domain-components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentById: async (
            dcId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dcId' is not null or undefined
            assertParamExists('getDomainComponentById', 'dcId', dcId);
            const localVarPath = `/api/v1/domain-components/{dcId}`.replace(
                `{${'dcId'}}`,
                encodeURIComponent(String(dcId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение корневых элементов organization-unit
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentRootsOrganizationUnits: async (
            dcId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dcId' is not null or undefined
            assertParamExists('getDomainComponentRootsOrganizationUnits', 'dcId', dcId);
            const localVarPath =
                `/api/v1/domain-components/{dcId}/organization-units/roots`.replace(
                    `{${'dcId'}}`,
                    encodeURIComponent(String(dcId)),
                );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {string} dcId
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainComponent: async (
            dcId: string,
            domainComponentDTO: DomainComponentDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dcId' is not null or undefined
            assertParamExists('updateDomainComponent', 'dcId', dcId);
            // verify required parameter 'domainComponentDTO' is not null or undefined
            assertParamExists('updateDomainComponent', 'domainComponentDTO', domainComponentDTO);
            const localVarPath = `/api/v1/domain-components/{dcId}`.replace(
                `{${'dcId'}}`,
                encodeURIComponent(String(dcId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                domainComponentDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DomainComponentsApi - functional programming interface
 * @export
 */
export const DomainComponentsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainComponentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomainComponent(
            domainComponentDTO: DomainComponentDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomainComponent(
                domainComponentDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.createDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomainComponent(
            dcId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomainComponent(
                dcId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.deleteDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDomainComponents(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainComponentDTO>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getAllDomainComponents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.getAllDomainComponents']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainComponentById(
            dcId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainComponentById(
                dcId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.getDomainComponentById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение корневых элементов organization-unit
         * @param {string} dcId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainComponentRootsOrganizationUnits(
            dcId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUnitDTO>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getDomainComponentRootsOrganizationUnits(
                    dcId,
                    options,
                );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap[
                    'DomainComponentsApi.getDomainComponentRootsOrganizationUnits'
                ]?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {string} dcId
         * @param {DomainComponentDTO} domainComponentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDomainComponent(
            dcId: string,
            domainComponentDTO: DomainComponentDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainComponentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDomainComponent(
                dcId,
                domainComponentDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['DomainComponentsApi.updateDomainComponent']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * DomainComponentsApi - factory interface
 * @export
 */
export const DomainComponentsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = DomainComponentsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new domain component
         * @param {DomainComponentsApiCreateDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainComponent(
            requestParameters: DomainComponentsApiCreateDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .createDomainComponent(requestParameters.domainComponentDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a domain component by ID
         * @param {DomainComponentsApiDeleteDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainComponent(
            requestParameters: DomainComponentsApiDeleteDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteDomainComponent(requestParameters.dcId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all domain components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainComponents(
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<DomainComponentDTO>> {
            return localVarFp
                .getAllDomainComponents(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a domain component by ID
         * @param {DomainComponentsApiGetDomainComponentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentById(
            requestParameters: DomainComponentsApiGetDomainComponentByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .getDomainComponentById(requestParameters.dcId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение корневых элементов organization-unit
         * @param {DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainComponentRootsOrganizationUnits(
            requestParameters: DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<OrganizationUnitDTO>> {
            return localVarFp
                .getDomainComponentRootsOrganizationUnits(requestParameters.dcId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a domain component by ID
         * @param {DomainComponentsApiUpdateDomainComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainComponent(
            requestParameters: DomainComponentsApiUpdateDomainComponentRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<DomainComponentDTO> {
            return localVarFp
                .updateDomainComponent(
                    requestParameters.dcId,
                    requestParameters.domainComponentDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiCreateDomainComponentRequest
 */
export interface DomainComponentsApiCreateDomainComponentRequest {
    /**
     *
     * @type {DomainComponentDTO}
     * @memberof DomainComponentsApiCreateDomainComponent
     */
    readonly domainComponentDTO: DomainComponentDTO;
}

/**
 * Request parameters for deleteDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiDeleteDomainComponentRequest
 */
export interface DomainComponentsApiDeleteDomainComponentRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiDeleteDomainComponent
     */
    readonly dcId: string;
}

/**
 * Request parameters for getDomainComponentById operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiGetDomainComponentByIdRequest
 */
export interface DomainComponentsApiGetDomainComponentByIdRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiGetDomainComponentById
     */
    readonly dcId: string;
}

/**
 * Request parameters for getDomainComponentRootsOrganizationUnits operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest
 */
export interface DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiGetDomainComponentRootsOrganizationUnits
     */
    readonly dcId: string;
}

/**
 * Request parameters for updateDomainComponent operation in DomainComponentsApi.
 * @export
 * @interface DomainComponentsApiUpdateDomainComponentRequest
 */
export interface DomainComponentsApiUpdateDomainComponentRequest {
    /**
     *
     * @type {string}
     * @memberof DomainComponentsApiUpdateDomainComponent
     */
    readonly dcId: string;

    /**
     *
     * @type {DomainComponentDTO}
     * @memberof DomainComponentsApiUpdateDomainComponent
     */
    readonly domainComponentDTO: DomainComponentDTO;
}

/**
 * DomainComponentsApi - object-oriented interface
 * @export
 * @class DomainComponentsApi
 * @extends {BaseAPI}
 */
export class DomainComponentsApi extends BaseAPI {
    /**
     *
     * @summary Create a new domain component
     * @param {DomainComponentsApiCreateDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public createDomainComponent(
        requestParameters: DomainComponentsApiCreateDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .createDomainComponent(requestParameters.domainComponentDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a domain component by ID
     * @param {DomainComponentsApiDeleteDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public deleteDomainComponent(
        requestParameters: DomainComponentsApiDeleteDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .deleteDomainComponent(requestParameters.dcId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all domain components
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getAllDomainComponents(options?: RawAxiosRequestConfig) {
        return DomainComponentsApiFp(this.configuration)
            .getAllDomainComponents(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a domain component by ID
     * @param {DomainComponentsApiGetDomainComponentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getDomainComponentById(
        requestParameters: DomainComponentsApiGetDomainComponentByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .getDomainComponentById(requestParameters.dcId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение корневых элементов organization-unit
     * @param {DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public getDomainComponentRootsOrganizationUnits(
        requestParameters: DomainComponentsApiGetDomainComponentRootsOrganizationUnitsRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .getDomainComponentRootsOrganizationUnits(requestParameters.dcId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a domain component by ID
     * @param {DomainComponentsApiUpdateDomainComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainComponentsApi
     */
    public updateDomainComponent(
        requestParameters: DomainComponentsApiUpdateDomainComponentRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return DomainComponentsApiFp(this.configuration)
            .updateDomainComponent(
                requestParameters.dcId,
                requestParameters.domainComponentDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * OrganizationUnitsApi - axios parameter creator
 * @export
 */
export const OrganizationUnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {string} ouId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToOrganizationUnit: async (
            ouId: string,
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('addAccountToOrganizationUnit', 'ouId', ouId);
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('addAccountToOrganizationUnit', 'accountId', accountId);
            const localVarPath = `/api/v1/organization-units/{ouId}/accounts/{accountId}`
                .replace(`{${'ouId'}}`, encodeURIComponent(String(ouId)))
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit: async (
            organizationUnitDTO: OrganizationUnitDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'organizationUnitDTO' is not null or undefined
            assertParamExists('createOrganizationUnit', 'organizationUnitDTO', organizationUnitDTO);
            const localVarPath = `/api/v1/organization-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                organizationUnitDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit: async (
            ouId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('deleteOrganizationUnit', 'ouId', ouId);
            const localVarPath = `/api/v1/organization-units/{ouId}`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByouId: async (
            ouId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('getAccountsByouId', 'ouId', ouId);
            const localVarPath = `/api/v1/organization-units/{ouId}/accounts`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all organization units
         * @param {string} [parentOuId]
         * @param {string} [dcId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationUnits: async (
            parentOuId?: string,
            dcId?: string,
            limit?: number,
            offset?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organization-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (parentOuId !== undefined) {
                localVarQueryParameter['parentOuId'] = parentOuId;
            }

            if (dcId !== undefined) {
                localVarQueryParameter['dcId'] = dcId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitById: async (
            ouId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('getOrganizationUnitById', 'ouId', ouId);
            const localVarPath = `/api/v1/organization-units/{ouId}`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение дочерних элементов organization-unit
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitChildren: async (
            ouId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('getOrganizationUnitChildren', 'ouId', ouId);
            const localVarPath = `/api/v1/organization-units/{ouId}/children`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение родительских элементов organization-unit
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitParents: async (
            ouId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('getOrganizationUnitParents', 'ouId', ouId);
            const localVarPath = `/api/v1/organization-units/{ouId}/parents`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {string} ouId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFromOrganizationUnit: async (
            ouId: string,
            accountId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('removeAccountFromOrganizationUnit', 'ouId', ouId);
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeAccountFromOrganizationUnit', 'accountId', accountId);
            const localVarPath = `/api/v1/organization-units/{ouId}/accounts/{accountId}`
                .replace(`{${'ouId'}}`, encodeURIComponent(String(ouId)))
                .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {string} ouId
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit: async (
            ouId: string,
            organizationUnitDTO: OrganizationUnitDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'ouId' is not null or undefined
            assertParamExists('updateOrganizationUnit', 'ouId', ouId);
            // verify required parameter 'organizationUnitDTO' is not null or undefined
            assertParamExists('updateOrganizationUnit', 'organizationUnitDTO', organizationUnitDTO);
            const localVarPath = `/api/v1/organization-units/{ouId}`.replace(
                `{${'ouId'}}`,
                encodeURIComponent(String(ouId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                organizationUnitDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationUnitsApi - functional programming interface
 * @export
 */
export const OrganizationUnitsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationUnitsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {string} ouId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountToOrganizationUnit(
            ouId: string,
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccountToOrganizationUnit(
                ouId,
                accountId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.addAccountToOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationUnit(
            organizationUnitDTO: OrganizationUnitDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationUnit(
                organizationUnitDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.createOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationUnit(
            ouId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationUnit(
                ouId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.deleteOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsByouId(
            ouId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsByouId(
                ouId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getAccountsByouId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all organization units
         * @param {string} [parentOuId]
         * @param {string} [dcId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrganizationUnits(
            parentOuId?: string,
            dcId?: string,
            limit?: number,
            offset?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<PaginatedOrganizationUnitResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrganizationUnits(
                parentOuId,
                dcId,
                limit,
                offset,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getAllOrganizationUnits']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUnitById(
            ouId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUnitById(
                ouId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getOrganizationUnitById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение дочерних элементов organization-unit
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUnitChildren(
            ouId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUnitDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUnitChildren(
                ouId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getOrganizationUnitChildren']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение родительских элементов organization-unit
         * @param {string} ouId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUnitParents(
            ouId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUnitDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUnitParents(
                ouId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.getOrganizationUnitParents']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {string} ouId
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAccountFromOrganizationUnit(
            ouId: string,
            accountId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.removeAccountFromOrganizationUnit(
                    ouId,
                    accountId,
                    options,
                );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.removeAccountFromOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {string} ouId
         * @param {OrganizationUnitDTO} organizationUnitDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationUnit(
            ouId: string,
            organizationUnitDTO: OrganizationUnitDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUnitDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationUnit(
                ouId,
                organizationUnitDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['OrganizationUnitsApi.updateOrganizationUnit']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * OrganizationUnitsApi - factory interface
 * @export
 */
export const OrganizationUnitsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = OrganizationUnitsApiFp(configuration);
    return {
        /**
         *
         * @summary Add account to org. unit link
         * @param {OrganizationUnitsApiAddAccountToOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountToOrganizationUnit(
            requestParameters: OrganizationUnitsApiAddAccountToOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .addAccountToOrganizationUnit(
                    requestParameters.ouId,
                    requestParameters.accountId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new organization unit
         * @param {OrganizationUnitsApiCreateOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit(
            requestParameters: OrganizationUnitsApiCreateOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .createOrganizationUnit(requestParameters.organizationUnitDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an organization unit by ID
         * @param {OrganizationUnitsApiDeleteOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit(
            requestParameters: OrganizationUnitsApiDeleteOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteOrganizationUnit(requestParameters.ouId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all organization unit accounts
         * @param {OrganizationUnitsApiGetAccountsByouIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsByouId(
            requestParameters: OrganizationUnitsApiGetAccountsByouIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<AccountDTO>> {
            return localVarFp
                .getAccountsByouId(requestParameters.ouId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all organization units
         * @param {OrganizationUnitsApiGetAllOrganizationUnitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationUnits(
            requestParameters: OrganizationUnitsApiGetAllOrganizationUnitsRequest = {},
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PaginatedOrganizationUnitResponse> {
            return localVarFp
                .getAllOrganizationUnits(
                    requestParameters.parentOuId,
                    requestParameters.dcId,
                    requestParameters.limit,
                    requestParameters.offset,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an organization unit by ID
         * @param {OrganizationUnitsApiGetOrganizationUnitByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitById(
            requestParameters: OrganizationUnitsApiGetOrganizationUnitByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .getOrganizationUnitById(requestParameters.ouId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение дочерних элементов organization-unit
         * @param {OrganizationUnitsApiGetOrganizationUnitChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitChildren(
            requestParameters: OrganizationUnitsApiGetOrganizationUnitChildrenRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<OrganizationUnitDTO>> {
            return localVarFp
                .getOrganizationUnitChildren(requestParameters.ouId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение родительских элементов organization-unit
         * @param {OrganizationUnitsApiGetOrganizationUnitParentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitParents(
            requestParameters: OrganizationUnitsApiGetOrganizationUnitParentsRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<OrganizationUnitDTO>> {
            return localVarFp
                .getOrganizationUnitParents(requestParameters.ouId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete account to org. unit link
         * @param {OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFromOrganizationUnit(
            requestParameters: OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .removeAccountFromOrganizationUnit(
                    requestParameters.ouId,
                    requestParameters.accountId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an organization unit by ID
         * @param {OrganizationUnitsApiUpdateOrganizationUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit(
            requestParameters: OrganizationUnitsApiUpdateOrganizationUnitRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<OrganizationUnitDTO> {
            return localVarFp
                .updateOrganizationUnit(
                    requestParameters.ouId,
                    requestParameters.organizationUnitDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAccountToOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiAddAccountToOrganizationUnitRequest
 */
export interface OrganizationUnitsApiAddAccountToOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiAddAccountToOrganizationUnit
     */
    readonly ouId: string;

    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiAddAccountToOrganizationUnit
     */
    readonly accountId: string;
}

/**
 * Request parameters for createOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiCreateOrganizationUnitRequest
 */
export interface OrganizationUnitsApiCreateOrganizationUnitRequest {
    /**
     *
     * @type {OrganizationUnitDTO}
     * @memberof OrganizationUnitsApiCreateOrganizationUnit
     */
    readonly organizationUnitDTO: OrganizationUnitDTO;
}

/**
 * Request parameters for deleteOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiDeleteOrganizationUnitRequest
 */
export interface OrganizationUnitsApiDeleteOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiDeleteOrganizationUnit
     */
    readonly ouId: string;
}

/**
 * Request parameters for getAccountsByouId operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetAccountsByouIdRequest
 */
export interface OrganizationUnitsApiGetAccountsByouIdRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetAccountsByouId
     */
    readonly ouId: string;
}

/**
 * Request parameters for getAllOrganizationUnits operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetAllOrganizationUnitsRequest
 */
export interface OrganizationUnitsApiGetAllOrganizationUnitsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetAllOrganizationUnits
     */
    readonly parentOuId?: string;

    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetAllOrganizationUnits
     */
    readonly dcId?: string;

    /**
     *
     * @type {number}
     * @memberof OrganizationUnitsApiGetAllOrganizationUnits
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof OrganizationUnitsApiGetAllOrganizationUnits
     */
    readonly offset?: number;
}

/**
 * Request parameters for getOrganizationUnitById operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetOrganizationUnitByIdRequest
 */
export interface OrganizationUnitsApiGetOrganizationUnitByIdRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetOrganizationUnitById
     */
    readonly ouId: string;
}

/**
 * Request parameters for getOrganizationUnitChildren operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetOrganizationUnitChildrenRequest
 */
export interface OrganizationUnitsApiGetOrganizationUnitChildrenRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetOrganizationUnitChildren
     */
    readonly ouId: string;
}

/**
 * Request parameters for getOrganizationUnitParents operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiGetOrganizationUnitParentsRequest
 */
export interface OrganizationUnitsApiGetOrganizationUnitParentsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiGetOrganizationUnitParents
     */
    readonly ouId: string;
}

/**
 * Request parameters for removeAccountFromOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest
 */
export interface OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiRemoveAccountFromOrganizationUnit
     */
    readonly ouId: string;

    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiRemoveAccountFromOrganizationUnit
     */
    readonly accountId: string;
}

/**
 * Request parameters for updateOrganizationUnit operation in OrganizationUnitsApi.
 * @export
 * @interface OrganizationUnitsApiUpdateOrganizationUnitRequest
 */
export interface OrganizationUnitsApiUpdateOrganizationUnitRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationUnitsApiUpdateOrganizationUnit
     */
    readonly ouId: string;

    /**
     *
     * @type {OrganizationUnitDTO}
     * @memberof OrganizationUnitsApiUpdateOrganizationUnit
     */
    readonly organizationUnitDTO: OrganizationUnitDTO;
}

/**
 * OrganizationUnitsApi - object-oriented interface
 * @export
 * @class OrganizationUnitsApi
 * @extends {BaseAPI}
 */
export class OrganizationUnitsApi extends BaseAPI {
    /**
     *
     * @summary Add account to org. unit link
     * @param {OrganizationUnitsApiAddAccountToOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public addAccountToOrganizationUnit(
        requestParameters: OrganizationUnitsApiAddAccountToOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .addAccountToOrganizationUnit(
                requestParameters.ouId,
                requestParameters.accountId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new organization unit
     * @param {OrganizationUnitsApiCreateOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public createOrganizationUnit(
        requestParameters: OrganizationUnitsApiCreateOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .createOrganizationUnit(requestParameters.organizationUnitDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete an organization unit by ID
     * @param {OrganizationUnitsApiDeleteOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public deleteOrganizationUnit(
        requestParameters: OrganizationUnitsApiDeleteOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .deleteOrganizationUnit(requestParameters.ouId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all organization unit accounts
     * @param {OrganizationUnitsApiGetAccountsByouIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getAccountsByouId(
        requestParameters: OrganizationUnitsApiGetAccountsByouIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getAccountsByouId(requestParameters.ouId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all organization units
     * @param {OrganizationUnitsApiGetAllOrganizationUnitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getAllOrganizationUnits(
        requestParameters: OrganizationUnitsApiGetAllOrganizationUnitsRequest = {},
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getAllOrganizationUnits(
                requestParameters.parentOuId,
                requestParameters.dcId,
                requestParameters.limit,
                requestParameters.offset,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get an organization unit by ID
     * @param {OrganizationUnitsApiGetOrganizationUnitByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getOrganizationUnitById(
        requestParameters: OrganizationUnitsApiGetOrganizationUnitByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getOrganizationUnitById(requestParameters.ouId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение дочерних элементов organization-unit
     * @param {OrganizationUnitsApiGetOrganizationUnitChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getOrganizationUnitChildren(
        requestParameters: OrganizationUnitsApiGetOrganizationUnitChildrenRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getOrganizationUnitChildren(requestParameters.ouId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение родительских элементов organization-unit
     * @param {OrganizationUnitsApiGetOrganizationUnitParentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public getOrganizationUnitParents(
        requestParameters: OrganizationUnitsApiGetOrganizationUnitParentsRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .getOrganizationUnitParents(requestParameters.ouId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete account to org. unit link
     * @param {OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public removeAccountFromOrganizationUnit(
        requestParameters: OrganizationUnitsApiRemoveAccountFromOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .removeAccountFromOrganizationUnit(
                requestParameters.ouId,
                requestParameters.accountId,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an organization unit by ID
     * @param {OrganizationUnitsApiUpdateOrganizationUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitsApi
     */
    public updateOrganizationUnit(
        requestParameters: OrganizationUnitsApiUpdateOrganizationUnitRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return OrganizationUnitsApiFp(this.configuration)
            .updateOrganizationUnit(
                requestParameters.ouId,
                requestParameters.organizationUnitDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Проверка наличия доступа у текущего пользователя
         * @param {string} actionType
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission: async (
            actionType: string,
            resourceId?: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'actionType' is not null or undefined
            assertParamExists('checkPermission', 'actionType', actionType);
            const localVarPath = `/api/v1/permissions/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (actionType !== undefined) {
                localVarQueryParameter['actionType'] = actionType;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionById: async (
            permissionId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermissionById', 'permissionId', permissionId);
            const localVarPath = `/api/v1/permissions/{permissionId}`.replace(
                `{${'permissionId'}}`,
                encodeURIComponent(String(permissionId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Проверка наличия доступа у текущего пользователя
         * @param {string} actionType
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPermission(
            actionType: string,
            resourceId?: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermission200Response>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPermission(
                actionType,
                resourceId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.checkPermission']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {string} permissionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionById(
            permissionId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionById(
                permissionId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['PermissionsApi.getPermissionById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = PermissionsApiFp(configuration);
    return {
        /**
         *
         * @summary Проверка наличия доступа у текущего пользователя
         * @param {PermissionsApiCheckPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission(
            requestParameters: PermissionsApiCheckPermissionRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<CheckPermission200Response> {
            return localVarFp
                .checkPermission(
                    requestParameters.actionType,
                    requestParameters.resourceId,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a permission by ID
         * @param {PermissionsApiGetPermissionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionById(
            requestParameters: PermissionsApiGetPermissionByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PermissionDTO> {
            return localVarFp
                .getPermissionById(requestParameters.permissionId, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkPermission operation in PermissionsApi.
 * @export
 * @interface PermissionsApiCheckPermissionRequest
 */
export interface PermissionsApiCheckPermissionRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiCheckPermission
     */
    readonly actionType: string;

    /**
     *
     * @type {string}
     * @memberof PermissionsApiCheckPermission
     */
    readonly resourceId?: string;
}

/**
 * Request parameters for getPermissionById operation in PermissionsApi.
 * @export
 * @interface PermissionsApiGetPermissionByIdRequest
 */
export interface PermissionsApiGetPermissionByIdRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiGetPermissionById
     */
    readonly permissionId: string;
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     *
     * @summary Проверка наличия доступа у текущего пользователя
     * @param {PermissionsApiCheckPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public checkPermission(
        requestParameters: PermissionsApiCheckPermissionRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .checkPermission(requestParameters.actionType, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a permission by ID
     * @param {PermissionsApiGetPermissionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public getPermissionById(
        requestParameters: PermissionsApiGetPermissionByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return PermissionsApiFp(this.configuration)
            .getPermissionById(requestParameters.permissionId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (
            productDTO: ProductDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('createProduct', 'productDTO', productDTO);
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                productDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (
            productId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (
            productId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductById', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение дочерних элементов продукта
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductChildren: async (
            productId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductChildren', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}/children`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение дочерних элементов продукта деревом
         * @param {string} productId
         * @param {number} [depth]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductTree: async (
            productId: string,
            depth?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductTree', 'productId', productId);
            const localVarPath = `/api/v1/products/{productId}/tree`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение корневых элементов продуктов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsRoots: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products-roots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a product by ID
         * @param {string} productId
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (
            productId: string,
            productDTO: ProductDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId);
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('updateProduct', 'productDTO', productDTO);
            const localVarPath = `/api/v1/products/{productId}`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                productDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(
            productDTO: ProductDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(
                productDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.createProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(
            productId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(
                productId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.deleteProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getAllProducts']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a product by ID
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(
            productId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(
                productId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getProductById']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение дочерних элементов продукта
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductChildren(
            productId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductChildren(
                productId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getProductChildren']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение дочерних элементов продукта деревом
         * @param {string} productId
         * @param {number} [depth]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductTree(
            productId: string,
            depth?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTreeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductTree(
                productId,
                depth,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getProductTree']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получение корневых элементов продуктов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsRoots(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsRoots(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.getProductsRoots']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a product by ID
         * @param {string} productId
         * @param {ProductDTO} productDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(
            productId: string,
            productDTO: ProductDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(
                productId,
                productDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['ProductsApi.updateProduct']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = ProductsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new product
         * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(
            requestParameters: ProductsApiCreateProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .createProduct(requestParameters.productDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a product by ID
         * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(
            requestParameters: ProductsApiDeleteProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteProduct(requestParameters.productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductDTO>> {
            return localVarFp.getAllProducts(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a product by ID
         * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(
            requestParameters: ProductsApiGetProductByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .getProductById(requestParameters.productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение дочерних элементов продукта
         * @param {ProductsApiGetProductChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductChildren(
            requestParameters: ProductsApiGetProductChildrenRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<ProductDTO>> {
            return localVarFp
                .getProductChildren(requestParameters.productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение дочерних элементов продукта деревом
         * @param {ProductsApiGetProductTreeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductTree(
            requestParameters: ProductsApiGetProductTreeRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductTreeDTO> {
            return localVarFp
                .getProductTree(requestParameters.productId, requestParameters.depth, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получение корневых элементов продуктов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsRoots(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductDTO>> {
            return localVarFp.getProductsRoots(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a product by ID
         * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(
            requestParameters: ProductsApiUpdateProductRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<ProductDTO> {
            return localVarFp
                .updateProduct(requestParameters.productId, requestParameters.productDTO, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateProductRequest
 */
export interface ProductsApiCreateProductRequest {
    /**
     *
     * @type {ProductDTO}
     * @memberof ProductsApiCreateProduct
     */
    readonly productDTO: ProductDTO;
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiDeleteProduct
     */
    readonly productId: string;
}

/**
 * Request parameters for getProductById operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductByIdRequest
 */
export interface ProductsApiGetProductByIdRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiGetProductById
     */
    readonly productId: string;
}

/**
 * Request parameters for getProductChildren operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductChildrenRequest
 */
export interface ProductsApiGetProductChildrenRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiGetProductChildren
     */
    readonly productId: string;
}

/**
 * Request parameters for getProductTree operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductTreeRequest
 */
export interface ProductsApiGetProductTreeRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiGetProductTree
     */
    readonly productId: string;

    /**
     *
     * @type {number}
     * @memberof ProductsApiGetProductTree
     */
    readonly depth?: number;
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     *
     * @type {string}
     * @memberof ProductsApiUpdateProduct
     */
    readonly productId: string;

    /**
     *
     * @type {ProductDTO}
     * @memberof ProductsApiUpdateProduct
     */
    readonly productDTO: ProductDTO;
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     *
     * @summary Create a new product
     * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public createProduct(
        requestParameters: ProductsApiCreateProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .createProduct(requestParameters.productDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a product by ID
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(
        requestParameters: ProductsApiDeleteProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .deleteProduct(requestParameters.productId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getAllProducts(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration)
            .getAllProducts(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a product by ID
     * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductById(
        requestParameters: ProductsApiGetProductByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .getProductById(requestParameters.productId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение дочерних элементов продукта
     * @param {ProductsApiGetProductChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductChildren(
        requestParameters: ProductsApiGetProductChildrenRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .getProductChildren(requestParameters.productId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение дочерних элементов продукта деревом
     * @param {ProductsApiGetProductTreeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductTree(
        requestParameters: ProductsApiGetProductTreeRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .getProductTree(requestParameters.productId, requestParameters.depth, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получение корневых элементов продуктов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductsRoots(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration)
            .getProductsRoots(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a product by ID
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(
        requestParameters: ProductsApiUpdateProductRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return ProductsApiFp(this.configuration)
            .updateProduct(requestParameters.productId, requestParameters.productDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new role
         * @param {RoleWithPermissionsDTO} roleWithPermissionsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (
            roleWithPermissionsDTO: RoleWithPermissionsDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleWithPermissionsDTO' is not null or undefined
            assertParamExists('createRole', 'roleWithPermissionsDTO', roleWithPermissionsDTO);
            const localVarPath = `/api/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                roleWithPermissionsDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a role by ID
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId);
            const localVarPath = `/api/v1/roles/{roleId}`.replace(
                `{${'roleId'}}`,
                encodeURIComponent(String(roleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all roles
         * @param {string} [search]
         * @param {string} [productId]
         * @param {string} [orgUnitId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles: async (
            search?: string,
            productId?: string,
            orgUnitId?: string,
            limit?: number,
            offset?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (orgUnitId !== undefined) {
                localVarQueryParameter['orgUnitId'] = orgUnitId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get role permission
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionsByRoleId: async (
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getPermissionsByRoleId', 'roleId', roleId);
            const localVarPath = `/api/v1/roles/{roleId}/permissions`.replace(
                `{${'roleId'}}`,
                encodeURIComponent(String(roleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a role by ID
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById: async (
            roleId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRoleById', 'roleId', roleId);
            const localVarPath = `/api/v1/roles/{roleId}`.replace(
                `{${'roleId'}}`,
                encodeURIComponent(String(roleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a role by ID
         * @param {string} roleId
         * @param {RoleWithPermissionsDTO} roleWithPermissionsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (
            roleId: string,
            roleWithPermissionsDTO: RoleWithPermissionsDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateRole', 'roleId', roleId);
            // verify required parameter 'roleWithPermissionsDTO' is not null or undefined
            assertParamExists('updateRole', 'roleWithPermissionsDTO', roleWithPermissionsDTO);
            const localVarPath = `/api/v1/roles/{roleId}`.replace(
                `{${'roleId'}}`,
                encodeURIComponent(String(roleId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                roleWithPermissionsDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new role
         * @param {RoleWithPermissionsDTO} roleWithPermissionsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(
            roleWithPermissionsDTO: RoleWithPermissionsDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleWithPermissionsDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(
                roleWithPermissionsDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.createRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete a role by ID
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.deleteRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all roles
         * @param {string} [search]
         * @param {string} [productId]
         * @param {string} [orgUnitId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoles(
            search?: string,
            productId?: string,
            orgUnitId?: string,
            limit?: number,
            offset?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRoleResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoles(
                search,
                productId,
                orgUnitId,
                limit,
                offset,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.getAllRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get role permission
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionsByRoleId(
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionDTO>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionsByRoleId(
                roleId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.getPermissionsByRoleId']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a role by ID
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleById(
            roleId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleById(roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.getRoleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a role by ID
         * @param {string} roleId
         * @param {RoleWithPermissionsDTO} roleWithPermissionsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(
            roleId: string,
            roleWithPermissionsDTO: RoleWithPermissionsDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleWithPermissionsDTO>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(
                roleId,
                roleWithPermissionsDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesApi.updateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = RolesApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new role
         * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(
            requestParameters: RolesApiCreateRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleWithPermissionsDTO> {
            return localVarFp
                .createRole(requestParameters.roleWithPermissionsDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a role by ID
         * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(
            requestParameters: RolesApiDeleteRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteRole(requestParameters.roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all roles
         * @param {RolesApiGetAllRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles(
            requestParameters: RolesApiGetAllRolesRequest = {},
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PaginatedRoleResponse> {
            return localVarFp
                .getAllRoles(
                    requestParameters.search,
                    requestParameters.productId,
                    requestParameters.orgUnitId,
                    requestParameters.limit,
                    requestParameters.offset,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get role permission
         * @param {RolesApiGetPermissionsByRoleIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionsByRoleId(
            requestParameters: RolesApiGetPermissionsByRoleIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Array<PermissionDTO>> {
            return localVarFp
                .getPermissionsByRoleId(requestParameters.roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a role by ID
         * @param {RolesApiGetRoleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById(
            requestParameters: RolesApiGetRoleByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleDTO> {
            return localVarFp
                .getRoleById(requestParameters.roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a role by ID
         * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(
            requestParameters: RolesApiUpdateRoleRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleWithPermissionsDTO> {
            return localVarFp
                .updateRole(
                    requestParameters.roleId,
                    requestParameters.roleWithPermissionsDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRole operation in RolesApi.
 * @export
 * @interface RolesApiCreateRoleRequest
 */
export interface RolesApiCreateRoleRequest {
    /**
     *
     * @type {RoleWithPermissionsDTO}
     * @memberof RolesApiCreateRole
     */
    readonly roleWithPermissionsDTO: RoleWithPermissionsDTO;
}

/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export interface RolesApiDeleteRoleRequest {
    /**
     *
     * @type {string}
     * @memberof RolesApiDeleteRole
     */
    readonly roleId: string;
}

/**
 * Request parameters for getAllRoles operation in RolesApi.
 * @export
 * @interface RolesApiGetAllRolesRequest
 */
export interface RolesApiGetAllRolesRequest {
    /**
     *
     * @type {string}
     * @memberof RolesApiGetAllRoles
     */
    readonly search?: string;

    /**
     *
     * @type {string}
     * @memberof RolesApiGetAllRoles
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof RolesApiGetAllRoles
     */
    readonly orgUnitId?: string;

    /**
     *
     * @type {number}
     * @memberof RolesApiGetAllRoles
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof RolesApiGetAllRoles
     */
    readonly offset?: number;
}

/**
 * Request parameters for getPermissionsByRoleId operation in RolesApi.
 * @export
 * @interface RolesApiGetPermissionsByRoleIdRequest
 */
export interface RolesApiGetPermissionsByRoleIdRequest {
    /**
     *
     * @type {string}
     * @memberof RolesApiGetPermissionsByRoleId
     */
    readonly roleId: string;
}

/**
 * Request parameters for getRoleById operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleByIdRequest
 */
export interface RolesApiGetRoleByIdRequest {
    /**
     *
     * @type {string}
     * @memberof RolesApiGetRoleById
     */
    readonly roleId: string;
}

/**
 * Request parameters for updateRole operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRoleRequest
 */
export interface RolesApiUpdateRoleRequest {
    /**
     *
     * @type {string}
     * @memberof RolesApiUpdateRole
     */
    readonly roleId: string;

    /**
     *
     * @type {RoleWithPermissionsDTO}
     * @memberof RolesApiUpdateRole
     */
    readonly roleWithPermissionsDTO: RoleWithPermissionsDTO;
}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     *
     * @summary Create a new role
     * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public createRole(
        requestParameters: RolesApiCreateRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .createRole(requestParameters.roleWithPermissionsDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a role by ID
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRole(
        requestParameters: RolesApiDeleteRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .deleteRole(requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all roles
     * @param {RolesApiGetAllRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getAllRoles(
        requestParameters: RolesApiGetAllRolesRequest = {},
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .getAllRoles(
                requestParameters.search,
                requestParameters.productId,
                requestParameters.orgUnitId,
                requestParameters.limit,
                requestParameters.offset,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get role permission
     * @param {RolesApiGetPermissionsByRoleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getPermissionsByRoleId(
        requestParameters: RolesApiGetPermissionsByRoleIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .getPermissionsByRoleId(requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a role by ID
     * @param {RolesApiGetRoleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoleById(
        requestParameters: RolesApiGetRoleByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .getRoleById(requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a role by ID
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRole(
        requestParameters: RolesApiUpdateRoleRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesApiFp(this.configuration)
            .updateRole(requestParameters.roleId, requestParameters.roleWithPermissionsDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * RolesRequestsApi - axios parameter creator
 * @export
 */
export const RolesRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new role request
         * @param {RoleRequestDTO} roleRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleRequest: async (
            roleRequestDTO: RoleRequestDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleRequestDTO' is not null or undefined
            assertParamExists('createRoleRequest', 'roleRequestDTO', roleRequestDTO);
            const localVarPath = `/api/v1/roles-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                roleRequestDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all roles requests
         * @param {string} [ownerId]
         * @param {string} [status]
         * @param {string} [accountId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesRequests: async (
            ownerId?: string,
            status?: string,
            accountId?: string,
            limit?: number,
            offset?: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/roles-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (ownerId !== undefined) {
                localVarQueryParameter['ownerId'] = ownerId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a role Request by ID
         * @param {string} roleRequestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRequestById: async (
            roleRequestId: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleRequestId' is not null or undefined
            assertParamExists('getRoleRequestById', 'roleRequestId', roleRequestId);
            const localVarPath = `/api/v1/roles-requests/{roleRequestId}`.replace(
                `{${'roleRequestId'}}`,
                encodeURIComponent(String(roleRequestId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a role request by ID
         * @param {string} roleRequestId
         * @param {RoleRequestDTO} roleRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleRequest: async (
            roleRequestId: string,
            roleRequestDTO: RoleRequestDTO,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleRequestId' is not null or undefined
            assertParamExists('updateRoleRequest', 'roleRequestId', roleRequestId);
            // verify required parameter 'roleRequestDTO' is not null or undefined
            assertParamExists('updateRoleRequest', 'roleRequestDTO', roleRequestDTO);
            const localVarPath = `/api/v1/roles-requests/{roleRequestId}`.replace(
                `{${'roleRequestId'}}`,
                encodeURIComponent(String(roleRequestId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                roleRequestDTO,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a role request status by ID
         * @param {string} roleRequestId
         * @param {string} newStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleRequestStatus: async (
            roleRequestId: string,
            newStatus: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'roleRequestId' is not null or undefined
            assertParamExists('updateRoleRequestStatus', 'roleRequestId', roleRequestId);
            // verify required parameter 'newStatus' is not null or undefined
            assertParamExists('updateRoleRequestStatus', 'newStatus', newStatus);
            const localVarPath = `/api/v1/roles-requests/{roleRequestId}`.replace(
                `{${'roleRequestId'}}`,
                encodeURIComponent(String(roleRequestId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            if (newStatus !== undefined) {
                localVarQueryParameter['newStatus'] = newStatus;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * RolesRequestsApi - functional programming interface
 * @export
 */
export const RolesRequestsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesRequestsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new role request
         * @param {RoleRequestDTO} roleRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleRequest(
            roleRequestDTO: RoleRequestDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRequestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoleRequest(
                roleRequestDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesRequestsApi.createRoleRequest']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all roles requests
         * @param {string} [ownerId]
         * @param {string} [status]
         * @param {string} [accountId]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRolesRequests(
            ownerId?: string,
            status?: string,
            accountId?: string,
            limit?: number,
            offset?: number,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRoleRequestResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRolesRequests(
                ownerId,
                status,
                accountId,
                limit,
                offset,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesRequestsApi.getAllRolesRequests']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a role Request by ID
         * @param {string} roleRequestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleRequestById(
            roleRequestId: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRequestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleRequestById(
                roleRequestId,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesRequestsApi.getRoleRequestById']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a role request by ID
         * @param {string} roleRequestId
         * @param {RoleRequestDTO} roleRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleRequest(
            roleRequestId: string,
            roleRequestDTO: RoleRequestDTO,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRequestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleRequest(
                roleRequestId,
                roleRequestDTO,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesRequestsApi.updateRoleRequest']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update a role request status by ID
         * @param {string} roleRequestId
         * @param {string} newStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleRequestStatus(
            roleRequestId: string,
            newStatus: string,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRequestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleRequestStatus(
                roleRequestId,
                newStatus,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['RolesRequestsApi.updateRoleRequestStatus']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * RolesRequestsApi - factory interface
 * @export
 */
export const RolesRequestsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = RolesRequestsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new role request
         * @param {RolesRequestsApiCreateRoleRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleRequest(
            requestParameters: RolesRequestsApiCreateRoleRequestRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleRequestDTO> {
            return localVarFp
                .createRoleRequest(requestParameters.roleRequestDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all roles requests
         * @param {RolesRequestsApiGetAllRolesRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesRequests(
            requestParameters: RolesRequestsApiGetAllRolesRequestsRequest = {},
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<PaginatedRoleRequestResponse> {
            return localVarFp
                .getAllRolesRequests(
                    requestParameters.ownerId,
                    requestParameters.status,
                    requestParameters.accountId,
                    requestParameters.limit,
                    requestParameters.offset,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a role Request by ID
         * @param {RolesRequestsApiGetRoleRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleRequestById(
            requestParameters: RolesRequestsApiGetRoleRequestByIdRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleRequestDTO> {
            return localVarFp
                .getRoleRequestById(requestParameters.roleRequestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a role request by ID
         * @param {RolesRequestsApiUpdateRoleRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleRequest(
            requestParameters: RolesRequestsApiUpdateRoleRequestRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleRequestDTO> {
            return localVarFp
                .updateRoleRequest(
                    requestParameters.roleRequestId,
                    requestParameters.roleRequestDTO,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a role request status by ID
         * @param {RolesRequestsApiUpdateRoleRequestStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleRequestStatus(
            requestParameters: RolesRequestsApiUpdateRoleRequestStatusRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<RoleRequestDTO> {
            return localVarFp
                .updateRoleRequestStatus(
                    requestParameters.roleRequestId,
                    requestParameters.newStatus,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRoleRequest operation in RolesRequestsApi.
 * @export
 * @interface RolesRequestsApiCreateRoleRequestRequest
 */
export interface RolesRequestsApiCreateRoleRequestRequest {
    /**
     *
     * @type {RoleRequestDTO}
     * @memberof RolesRequestsApiCreateRoleRequest
     */
    readonly roleRequestDTO: RoleRequestDTO;
}

/**
 * Request parameters for getAllRolesRequests operation in RolesRequestsApi.
 * @export
 * @interface RolesRequestsApiGetAllRolesRequestsRequest
 */
export interface RolesRequestsApiGetAllRolesRequestsRequest {
    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiGetAllRolesRequests
     */
    readonly ownerId?: string;

    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiGetAllRolesRequests
     */
    readonly status?: string;

    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiGetAllRolesRequests
     */
    readonly accountId?: string;

    /**
     *
     * @type {number}
     * @memberof RolesRequestsApiGetAllRolesRequests
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof RolesRequestsApiGetAllRolesRequests
     */
    readonly offset?: number;
}

/**
 * Request parameters for getRoleRequestById operation in RolesRequestsApi.
 * @export
 * @interface RolesRequestsApiGetRoleRequestByIdRequest
 */
export interface RolesRequestsApiGetRoleRequestByIdRequest {
    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiGetRoleRequestById
     */
    readonly roleRequestId: string;
}

/**
 * Request parameters for updateRoleRequest operation in RolesRequestsApi.
 * @export
 * @interface RolesRequestsApiUpdateRoleRequestRequest
 */
export interface RolesRequestsApiUpdateRoleRequestRequest {
    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiUpdateRoleRequest
     */
    readonly roleRequestId: string;

    /**
     *
     * @type {RoleRequestDTO}
     * @memberof RolesRequestsApiUpdateRoleRequest
     */
    readonly roleRequestDTO: RoleRequestDTO;
}

/**
 * Request parameters for updateRoleRequestStatus operation in RolesRequestsApi.
 * @export
 * @interface RolesRequestsApiUpdateRoleRequestStatusRequest
 */
export interface RolesRequestsApiUpdateRoleRequestStatusRequest {
    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiUpdateRoleRequestStatus
     */
    readonly roleRequestId: string;

    /**
     *
     * @type {string}
     * @memberof RolesRequestsApiUpdateRoleRequestStatus
     */
    readonly newStatus: string;
}

/**
 * RolesRequestsApi - object-oriented interface
 * @export
 * @class RolesRequestsApi
 * @extends {BaseAPI}
 */
export class RolesRequestsApi extends BaseAPI {
    /**
     *
     * @summary Create a new role request
     * @param {RolesRequestsApiCreateRoleRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesRequestsApi
     */
    public createRoleRequest(
        requestParameters: RolesRequestsApiCreateRoleRequestRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesRequestsApiFp(this.configuration)
            .createRoleRequest(requestParameters.roleRequestDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get all roles requests
     * @param {RolesRequestsApiGetAllRolesRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesRequestsApi
     */
    public getAllRolesRequests(
        requestParameters: RolesRequestsApiGetAllRolesRequestsRequest = {},
        options?: RawAxiosRequestConfig,
    ) {
        return RolesRequestsApiFp(this.configuration)
            .getAllRolesRequests(
                requestParameters.ownerId,
                requestParameters.status,
                requestParameters.accountId,
                requestParameters.limit,
                requestParameters.offset,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a role Request by ID
     * @param {RolesRequestsApiGetRoleRequestByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesRequestsApi
     */
    public getRoleRequestById(
        requestParameters: RolesRequestsApiGetRoleRequestByIdRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesRequestsApiFp(this.configuration)
            .getRoleRequestById(requestParameters.roleRequestId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a role request by ID
     * @param {RolesRequestsApiUpdateRoleRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesRequestsApi
     */
    public updateRoleRequest(
        requestParameters: RolesRequestsApiUpdateRoleRequestRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesRequestsApiFp(this.configuration)
            .updateRoleRequest(
                requestParameters.roleRequestId,
                requestParameters.roleRequestDTO,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update a role request status by ID
     * @param {RolesRequestsApiUpdateRoleRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesRequestsApi
     */
    public updateRoleRequestStatus(
        requestParameters: RolesRequestsApiUpdateRoleRequestStatusRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return RolesRequestsApiFp(this.configuration)
            .updateRoleRequestStatus(
                requestParameters.roleRequestId,
                requestParameters.newStatus,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * V1PingControllerApi - axios parameter creator
 * @export
 */
export const V1PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster: async (
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * V1PingControllerApi - functional programming interface
 * @export
 */
export const V1PingControllerApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = V1PingControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ClustersCreateCluster(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.v1ClustersCreateCluster(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1PingControllerApi.v1ClustersCreateCluster']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * V1PingControllerApi - factory interface
 * @export
 */
export const V1PingControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = V1PingControllerApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp
                .v1ClustersCreateCluster(options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1PingControllerApi - object-oriented interface
 * @export
 * @class V1PingControllerApi
 * @extends {BaseAPI}
 */
export class V1PingControllerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PingControllerApi
     */
    public v1ClustersCreateCluster(options?: RawAxiosRequestConfig) {
        return V1PingControllerApiFp(this.configuration)
            .v1ClustersCreateCluster(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
