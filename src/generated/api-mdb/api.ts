/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString,
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, RequiredError} from './base';

/**
 *
 * @export
 * @interface V1BadRequestResponse
 */
export interface V1BadRequestResponse {
    /**
     *
     * @type {string}
     * @memberof V1BadRequestResponse
     */
    message: string;
}

/**
 *
 * @export
 * @interface V1CreateClusterRequest
 */
export interface V1CreateClusterRequest {
    /**
     *
     * @type {string}
     * @memberof V1CreateClusterRequest
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof V1CreateClusterRequest
     */
    projectId: string;
}

/**
 *
 * @export
 * @interface V1CreateClusterResponse
 */
export interface V1CreateClusterResponse {
    /**
     *
     * @type {string}
     * @memberof V1CreateClusterResponse
     */
    clusterId: string;
}

/**
 *
 * @export
 * @interface V1CreateProjectRequest
 */
export interface V1CreateProjectRequest {
    /**
     *
     * @type {string}
     * @memberof V1CreateProjectRequest
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof V1CreateProjectRequest
     */
    ownerId: string;
}

/**
 *
 * @export
 * @interface V1CreateProjectResponse
 */
export interface V1CreateProjectResponse {
    /**
     *
     * @type {string}
     * @memberof V1CreateProjectResponse
     */
    clusterId: string;
}

/**
 *
 * @export
 * @interface V1GetClusterResponse
 */
export interface V1GetClusterResponse {
    /**
     *
     * @type {string}
     * @memberof V1GetClusterResponse
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof V1GetClusterResponse
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof V1GetClusterResponse
     */
    projectId: string;
    /**
     *
     * @type {string}
     * @memberof V1GetClusterResponse
     */
    type: V1GetClusterResponseTypeEnum;
}

export const V1GetClusterResponseTypeEnum = {
    Mongodb: 'mongodb',
} as const;

export type V1GetClusterResponseTypeEnum =
    (typeof V1GetClusterResponseTypeEnum)[keyof typeof V1GetClusterResponseTypeEnum];

/**
 *
 * @export
 * @interface V1UpdateClusterProjectRequest
 */
export interface V1UpdateClusterProjectRequest {
    /**
     *
     * @type {string}
     * @memberof V1UpdateClusterProjectRequest
     */
    clusterId: string;
    /**
     *
     * @type {string}
     * @memberof V1UpdateClusterProjectRequest
     */
    projectId: string;
}

/**
 * V1ClustersApi - axios parameter creator
 * @export
 */
export const V1ClustersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create cluster.
         * @param {V1CreateClusterRequest} v1CreateClusterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster: async (
            v1CreateClusterRequest: V1CreateClusterRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'v1CreateClusterRequest' is not null or undefined
            assertParamExists(
                'v1ClustersCreateCluster',
                'v1CreateClusterRequest',
                v1CreateClusterRequest,
            );
            const localVarPath = `/api/v1/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                v1CreateClusterRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get cluster by id.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersGetCluster: async (
            id: string,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ClustersGetCluster', 'id', id);
            const localVarPath = `/api/v1/clusters/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update cluster project
         * @param {V1UpdateClusterProjectRequest} v1UpdateClusterProjectRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersUpdateProject: async (
            v1UpdateClusterProjectRequest: V1UpdateClusterProjectRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'v1UpdateClusterProjectRequest' is not null or undefined
            assertParamExists(
                'v1ClustersUpdateProject',
                'v1UpdateClusterProjectRequest',
                v1UpdateClusterProjectRequest,
            );
            const localVarPath = `/api/v1/clusters/update-project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                v1UpdateClusterProjectRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * V1ClustersApi - functional programming interface
 * @export
 */
export const V1ClustersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ClustersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create cluster.
         * @param {V1CreateClusterRequest} v1CreateClusterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ClustersCreateCluster(
            v1CreateClusterRequest: V1CreateClusterRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateClusterResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ClustersCreateCluster(
                v1CreateClusterRequest,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1ClustersApi.v1ClustersCreateCluster']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get cluster by id.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ClustersGetCluster(
            id: string,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetClusterResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ClustersGetCluster(
                id,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1ClustersApi.v1ClustersGetCluster']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update cluster project
         * @param {V1UpdateClusterProjectRequest} v1UpdateClusterProjectRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ClustersUpdateProject(
            v1UpdateClusterProjectRequest: V1UpdateClusterProjectRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ClustersUpdateProject(
                v1UpdateClusterProjectRequest,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1ClustersApi.v1ClustersUpdateProject']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * V1ClustersApi - factory interface
 * @export
 */
export const V1ClustersApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = V1ClustersApiFp(configuration);
    return {
        /**
         *
         * @summary Create cluster.
         * @param {V1ClustersApiV1ClustersCreateClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersCreateCluster(
            requestParameters: V1ClustersApiV1ClustersCreateClusterRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<V1CreateClusterResponse> {
            return localVarFp
                .v1ClustersCreateCluster(requestParameters.v1CreateClusterRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get cluster by id.
         * @param {V1ClustersApiV1ClustersGetClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersGetCluster(
            requestParameters: V1ClustersApiV1ClustersGetClusterRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<V1GetClusterResponse> {
            return localVarFp
                .v1ClustersGetCluster(requestParameters.id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update cluster project
         * @param {V1ClustersApiV1ClustersUpdateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ClustersUpdateProject(
            requestParameters: V1ClustersApiV1ClustersUpdateProjectRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .v1ClustersUpdateProject(requestParameters.v1UpdateClusterProjectRequest, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1ClustersCreateCluster operation in V1ClustersApi.
 * @export
 * @interface V1ClustersApiV1ClustersCreateClusterRequest
 */
export interface V1ClustersApiV1ClustersCreateClusterRequest {
    /**
     *
     * @type {V1CreateClusterRequest}
     * @memberof V1ClustersApiV1ClustersCreateCluster
     */
    readonly v1CreateClusterRequest: V1CreateClusterRequest;
}

/**
 * Request parameters for v1ClustersGetCluster operation in V1ClustersApi.
 * @export
 * @interface V1ClustersApiV1ClustersGetClusterRequest
 */
export interface V1ClustersApiV1ClustersGetClusterRequest {
    /**
     *
     * @type {string}
     * @memberof V1ClustersApiV1ClustersGetCluster
     */
    readonly id: string;
}

/**
 * Request parameters for v1ClustersUpdateProject operation in V1ClustersApi.
 * @export
 * @interface V1ClustersApiV1ClustersUpdateProjectRequest
 */
export interface V1ClustersApiV1ClustersUpdateProjectRequest {
    /**
     *
     * @type {V1UpdateClusterProjectRequest}
     * @memberof V1ClustersApiV1ClustersUpdateProject
     */
    readonly v1UpdateClusterProjectRequest: V1UpdateClusterProjectRequest;
}

/**
 * V1ClustersApi - object-oriented interface
 * @export
 * @class V1ClustersApi
 * @extends {BaseAPI}
 */
export class V1ClustersApi extends BaseAPI {
    /**
     *
     * @summary Create cluster.
     * @param {V1ClustersApiV1ClustersCreateClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClustersApi
     */
    public v1ClustersCreateCluster(
        requestParameters: V1ClustersApiV1ClustersCreateClusterRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return V1ClustersApiFp(this.configuration)
            .v1ClustersCreateCluster(requestParameters.v1CreateClusterRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get cluster by id.
     * @param {V1ClustersApiV1ClustersGetClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClustersApi
     */
    public v1ClustersGetCluster(
        requestParameters: V1ClustersApiV1ClustersGetClusterRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return V1ClustersApiFp(this.configuration)
            .v1ClustersGetCluster(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update cluster project
     * @param {V1ClustersApiV1ClustersUpdateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClustersApi
     */
    public v1ClustersUpdateProject(
        requestParameters: V1ClustersApiV1ClustersUpdateProjectRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return V1ClustersApiFp(this.configuration)
            .v1ClustersUpdateProject(requestParameters.v1UpdateClusterProjectRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * V1ProjectsApi - axios parameter creator
 * @export
 */
export const V1ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create project
         * @param {V1CreateProjectRequest} v1CreateProjectRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProjectsCreateProject: async (
            v1CreateProjectRequest: V1CreateProjectRequest,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'v1CreateProjectRequest' is not null or undefined
            assertParamExists(
                'v1ProjectsCreateProject',
                'v1CreateProjectRequest',
                v1CreateProjectRequest,
            );
            const localVarPath = `/api/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                v1CreateProjectRequest,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * V1ProjectsApi - functional programming interface
 * @export
 */
export const V1ProjectsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ProjectsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create project
         * @param {V1CreateProjectRequest} v1CreateProjectRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProjectsCreateProject(
            v1CreateProjectRequest: V1CreateProjectRequest,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateProjectResponse>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProjectsCreateProject(
                v1CreateProjectRequest,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['V1ProjectsApi.v1ProjectsCreateProject']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * V1ProjectsApi - factory interface
 * @export
 */
export const V1ProjectsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = V1ProjectsApiFp(configuration);
    return {
        /**
         *
         * @summary Create project
         * @param {V1ProjectsApiV1ProjectsCreateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProjectsCreateProject(
            requestParameters: V1ProjectsApiV1ProjectsCreateProjectRequest,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<V1CreateProjectResponse> {
            return localVarFp
                .v1ProjectsCreateProject(requestParameters.v1CreateProjectRequest, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1ProjectsCreateProject operation in V1ProjectsApi.
 * @export
 * @interface V1ProjectsApiV1ProjectsCreateProjectRequest
 */
export interface V1ProjectsApiV1ProjectsCreateProjectRequest {
    /**
     *
     * @type {V1CreateProjectRequest}
     * @memberof V1ProjectsApiV1ProjectsCreateProject
     */
    readonly v1CreateProjectRequest: V1CreateProjectRequest;
}

/**
 * V1ProjectsApi - object-oriented interface
 * @export
 * @class V1ProjectsApi
 * @extends {BaseAPI}
 */
export class V1ProjectsApi extends BaseAPI {
    /**
     *
     * @summary Create project
     * @param {V1ProjectsApiV1ProjectsCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ProjectsApi
     */
    public v1ProjectsCreateProject(
        requestParameters: V1ProjectsApiV1ProjectsCreateProjectRequest,
        options?: RawAxiosRequestConfig,
    ) {
        return V1ProjectsApiFp(this.configuration)
            .v1ProjectsCreateProject(requestParameters.v1CreateProjectRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
